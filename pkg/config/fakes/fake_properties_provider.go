// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vmware-tanzu/service-instance-migrator-for-cloud-foundry/pkg/config"
)

type FakePropertiesProvider struct {
	EnvironmentStub        func(config.BoshPropertiesBuilder, config.CFPropertiesBuilder, config.CCDBPropertiesBuilder) config.EnvProperties
	environmentMutex       sync.RWMutex
	environmentArgsForCall []struct {
		arg1 config.BoshPropertiesBuilder
		arg2 config.CFPropertiesBuilder
		arg3 config.CCDBPropertiesBuilder
	}
	environmentReturns struct {
		result1 config.EnvProperties
	}
	environmentReturnsOnCall map[int]struct {
		result1 config.EnvProperties
	}
	SourceBoshPropertiesBuilderStub        func() config.BoshPropertiesBuilder
	sourceBoshPropertiesBuilderMutex       sync.RWMutex
	sourceBoshPropertiesBuilderArgsForCall []struct {
	}
	sourceBoshPropertiesBuilderReturns struct {
		result1 config.BoshPropertiesBuilder
	}
	sourceBoshPropertiesBuilderReturnsOnCall map[int]struct {
		result1 config.BoshPropertiesBuilder
	}
	SourceCCDBPropertiesBuilderStub        func(config.BoshPropertiesBuilder) config.CCDBPropertiesBuilder
	sourceCCDBPropertiesBuilderMutex       sync.RWMutex
	sourceCCDBPropertiesBuilderArgsForCall []struct {
		arg1 config.BoshPropertiesBuilder
	}
	sourceCCDBPropertiesBuilderReturns struct {
		result1 config.CCDBPropertiesBuilder
	}
	sourceCCDBPropertiesBuilderReturnsOnCall map[int]struct {
		result1 config.CCDBPropertiesBuilder
	}
	SourceCFPropertiesBuilderStub        func() config.CFPropertiesBuilder
	sourceCFPropertiesBuilderMutex       sync.RWMutex
	sourceCFPropertiesBuilderArgsForCall []struct {
	}
	sourceCFPropertiesBuilderReturns struct {
		result1 config.CFPropertiesBuilder
	}
	sourceCFPropertiesBuilderReturnsOnCall map[int]struct {
		result1 config.CFPropertiesBuilder
	}
	TargetBoshPropertiesBuilderStub        func() config.BoshPropertiesBuilder
	targetBoshPropertiesBuilderMutex       sync.RWMutex
	targetBoshPropertiesBuilderArgsForCall []struct {
	}
	targetBoshPropertiesBuilderReturns struct {
		result1 config.BoshPropertiesBuilder
	}
	targetBoshPropertiesBuilderReturnsOnCall map[int]struct {
		result1 config.BoshPropertiesBuilder
	}
	TargetCCDBPropertiesBuilderStub        func(config.BoshPropertiesBuilder) config.CCDBPropertiesBuilder
	targetCCDBPropertiesBuilderMutex       sync.RWMutex
	targetCCDBPropertiesBuilderArgsForCall []struct {
		arg1 config.BoshPropertiesBuilder
	}
	targetCCDBPropertiesBuilderReturns struct {
		result1 config.CCDBPropertiesBuilder
	}
	targetCCDBPropertiesBuilderReturnsOnCall map[int]struct {
		result1 config.CCDBPropertiesBuilder
	}
	TargetCFPropertiesBuilderStub        func() config.CFPropertiesBuilder
	targetCFPropertiesBuilderMutex       sync.RWMutex
	targetCFPropertiesBuilderArgsForCall []struct {
	}
	targetCFPropertiesBuilderReturns struct {
		result1 config.CFPropertiesBuilder
	}
	targetCFPropertiesBuilderReturnsOnCall map[int]struct {
		result1 config.CFPropertiesBuilder
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePropertiesProvider) Environment(arg1 config.BoshPropertiesBuilder, arg2 config.CFPropertiesBuilder, arg3 config.CCDBPropertiesBuilder) config.EnvProperties {
	fake.environmentMutex.Lock()
	ret, specificReturn := fake.environmentReturnsOnCall[len(fake.environmentArgsForCall)]
	fake.environmentArgsForCall = append(fake.environmentArgsForCall, struct {
		arg1 config.BoshPropertiesBuilder
		arg2 config.CFPropertiesBuilder
		arg3 config.CCDBPropertiesBuilder
	}{arg1, arg2, arg3})
	stub := fake.EnvironmentStub
	fakeReturns := fake.environmentReturns
	fake.recordInvocation("Environment", []interface{}{arg1, arg2, arg3})
	fake.environmentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePropertiesProvider) EnvironmentCallCount() int {
	fake.environmentMutex.RLock()
	defer fake.environmentMutex.RUnlock()
	return len(fake.environmentArgsForCall)
}

func (fake *FakePropertiesProvider) EnvironmentCalls(stub func(config.BoshPropertiesBuilder, config.CFPropertiesBuilder, config.CCDBPropertiesBuilder) config.EnvProperties) {
	fake.environmentMutex.Lock()
	defer fake.environmentMutex.Unlock()
	fake.EnvironmentStub = stub
}

func (fake *FakePropertiesProvider) EnvironmentArgsForCall(i int) (config.BoshPropertiesBuilder, config.CFPropertiesBuilder, config.CCDBPropertiesBuilder) {
	fake.environmentMutex.RLock()
	defer fake.environmentMutex.RUnlock()
	argsForCall := fake.environmentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePropertiesProvider) EnvironmentReturns(result1 config.EnvProperties) {
	fake.environmentMutex.Lock()
	defer fake.environmentMutex.Unlock()
	fake.EnvironmentStub = nil
	fake.environmentReturns = struct {
		result1 config.EnvProperties
	}{result1}
}

func (fake *FakePropertiesProvider) EnvironmentReturnsOnCall(i int, result1 config.EnvProperties) {
	fake.environmentMutex.Lock()
	defer fake.environmentMutex.Unlock()
	fake.EnvironmentStub = nil
	if fake.environmentReturnsOnCall == nil {
		fake.environmentReturnsOnCall = make(map[int]struct {
			result1 config.EnvProperties
		})
	}
	fake.environmentReturnsOnCall[i] = struct {
		result1 config.EnvProperties
	}{result1}
}

func (fake *FakePropertiesProvider) SourceBoshPropertiesBuilder() config.BoshPropertiesBuilder {
	fake.sourceBoshPropertiesBuilderMutex.Lock()
	ret, specificReturn := fake.sourceBoshPropertiesBuilderReturnsOnCall[len(fake.sourceBoshPropertiesBuilderArgsForCall)]
	fake.sourceBoshPropertiesBuilderArgsForCall = append(fake.sourceBoshPropertiesBuilderArgsForCall, struct {
	}{})
	stub := fake.SourceBoshPropertiesBuilderStub
	fakeReturns := fake.sourceBoshPropertiesBuilderReturns
	fake.recordInvocation("SourceBoshPropertiesBuilder", []interface{}{})
	fake.sourceBoshPropertiesBuilderMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePropertiesProvider) SourceBoshPropertiesBuilderCallCount() int {
	fake.sourceBoshPropertiesBuilderMutex.RLock()
	defer fake.sourceBoshPropertiesBuilderMutex.RUnlock()
	return len(fake.sourceBoshPropertiesBuilderArgsForCall)
}

func (fake *FakePropertiesProvider) SourceBoshPropertiesBuilderCalls(stub func() config.BoshPropertiesBuilder) {
	fake.sourceBoshPropertiesBuilderMutex.Lock()
	defer fake.sourceBoshPropertiesBuilderMutex.Unlock()
	fake.SourceBoshPropertiesBuilderStub = stub
}

func (fake *FakePropertiesProvider) SourceBoshPropertiesBuilderReturns(result1 config.BoshPropertiesBuilder) {
	fake.sourceBoshPropertiesBuilderMutex.Lock()
	defer fake.sourceBoshPropertiesBuilderMutex.Unlock()
	fake.SourceBoshPropertiesBuilderStub = nil
	fake.sourceBoshPropertiesBuilderReturns = struct {
		result1 config.BoshPropertiesBuilder
	}{result1}
}

func (fake *FakePropertiesProvider) SourceBoshPropertiesBuilderReturnsOnCall(i int, result1 config.BoshPropertiesBuilder) {
	fake.sourceBoshPropertiesBuilderMutex.Lock()
	defer fake.sourceBoshPropertiesBuilderMutex.Unlock()
	fake.SourceBoshPropertiesBuilderStub = nil
	if fake.sourceBoshPropertiesBuilderReturnsOnCall == nil {
		fake.sourceBoshPropertiesBuilderReturnsOnCall = make(map[int]struct {
			result1 config.BoshPropertiesBuilder
		})
	}
	fake.sourceBoshPropertiesBuilderReturnsOnCall[i] = struct {
		result1 config.BoshPropertiesBuilder
	}{result1}
}

func (fake *FakePropertiesProvider) SourceCCDBPropertiesBuilder(arg1 config.BoshPropertiesBuilder) config.CCDBPropertiesBuilder {
	fake.sourceCCDBPropertiesBuilderMutex.Lock()
	ret, specificReturn := fake.sourceCCDBPropertiesBuilderReturnsOnCall[len(fake.sourceCCDBPropertiesBuilderArgsForCall)]
	fake.sourceCCDBPropertiesBuilderArgsForCall = append(fake.sourceCCDBPropertiesBuilderArgsForCall, struct {
		arg1 config.BoshPropertiesBuilder
	}{arg1})
	stub := fake.SourceCCDBPropertiesBuilderStub
	fakeReturns := fake.sourceCCDBPropertiesBuilderReturns
	fake.recordInvocation("SourceCCDBPropertiesBuilder", []interface{}{arg1})
	fake.sourceCCDBPropertiesBuilderMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePropertiesProvider) SourceCCDBPropertiesBuilderCallCount() int {
	fake.sourceCCDBPropertiesBuilderMutex.RLock()
	defer fake.sourceCCDBPropertiesBuilderMutex.RUnlock()
	return len(fake.sourceCCDBPropertiesBuilderArgsForCall)
}

func (fake *FakePropertiesProvider) SourceCCDBPropertiesBuilderCalls(stub func(config.BoshPropertiesBuilder) config.CCDBPropertiesBuilder) {
	fake.sourceCCDBPropertiesBuilderMutex.Lock()
	defer fake.sourceCCDBPropertiesBuilderMutex.Unlock()
	fake.SourceCCDBPropertiesBuilderStub = stub
}

func (fake *FakePropertiesProvider) SourceCCDBPropertiesBuilderArgsForCall(i int) config.BoshPropertiesBuilder {
	fake.sourceCCDBPropertiesBuilderMutex.RLock()
	defer fake.sourceCCDBPropertiesBuilderMutex.RUnlock()
	argsForCall := fake.sourceCCDBPropertiesBuilderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePropertiesProvider) SourceCCDBPropertiesBuilderReturns(result1 config.CCDBPropertiesBuilder) {
	fake.sourceCCDBPropertiesBuilderMutex.Lock()
	defer fake.sourceCCDBPropertiesBuilderMutex.Unlock()
	fake.SourceCCDBPropertiesBuilderStub = nil
	fake.sourceCCDBPropertiesBuilderReturns = struct {
		result1 config.CCDBPropertiesBuilder
	}{result1}
}

func (fake *FakePropertiesProvider) SourceCCDBPropertiesBuilderReturnsOnCall(i int, result1 config.CCDBPropertiesBuilder) {
	fake.sourceCCDBPropertiesBuilderMutex.Lock()
	defer fake.sourceCCDBPropertiesBuilderMutex.Unlock()
	fake.SourceCCDBPropertiesBuilderStub = nil
	if fake.sourceCCDBPropertiesBuilderReturnsOnCall == nil {
		fake.sourceCCDBPropertiesBuilderReturnsOnCall = make(map[int]struct {
			result1 config.CCDBPropertiesBuilder
		})
	}
	fake.sourceCCDBPropertiesBuilderReturnsOnCall[i] = struct {
		result1 config.CCDBPropertiesBuilder
	}{result1}
}

func (fake *FakePropertiesProvider) SourceCFPropertiesBuilder() config.CFPropertiesBuilder {
	fake.sourceCFPropertiesBuilderMutex.Lock()
	ret, specificReturn := fake.sourceCFPropertiesBuilderReturnsOnCall[len(fake.sourceCFPropertiesBuilderArgsForCall)]
	fake.sourceCFPropertiesBuilderArgsForCall = append(fake.sourceCFPropertiesBuilderArgsForCall, struct {
	}{})
	stub := fake.SourceCFPropertiesBuilderStub
	fakeReturns := fake.sourceCFPropertiesBuilderReturns
	fake.recordInvocation("SourceCFPropertiesBuilder", []interface{}{})
	fake.sourceCFPropertiesBuilderMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePropertiesProvider) SourceCFPropertiesBuilderCallCount() int {
	fake.sourceCFPropertiesBuilderMutex.RLock()
	defer fake.sourceCFPropertiesBuilderMutex.RUnlock()
	return len(fake.sourceCFPropertiesBuilderArgsForCall)
}

func (fake *FakePropertiesProvider) SourceCFPropertiesBuilderCalls(stub func() config.CFPropertiesBuilder) {
	fake.sourceCFPropertiesBuilderMutex.Lock()
	defer fake.sourceCFPropertiesBuilderMutex.Unlock()
	fake.SourceCFPropertiesBuilderStub = stub
}

func (fake *FakePropertiesProvider) SourceCFPropertiesBuilderReturns(result1 config.CFPropertiesBuilder) {
	fake.sourceCFPropertiesBuilderMutex.Lock()
	defer fake.sourceCFPropertiesBuilderMutex.Unlock()
	fake.SourceCFPropertiesBuilderStub = nil
	fake.sourceCFPropertiesBuilderReturns = struct {
		result1 config.CFPropertiesBuilder
	}{result1}
}

func (fake *FakePropertiesProvider) SourceCFPropertiesBuilderReturnsOnCall(i int, result1 config.CFPropertiesBuilder) {
	fake.sourceCFPropertiesBuilderMutex.Lock()
	defer fake.sourceCFPropertiesBuilderMutex.Unlock()
	fake.SourceCFPropertiesBuilderStub = nil
	if fake.sourceCFPropertiesBuilderReturnsOnCall == nil {
		fake.sourceCFPropertiesBuilderReturnsOnCall = make(map[int]struct {
			result1 config.CFPropertiesBuilder
		})
	}
	fake.sourceCFPropertiesBuilderReturnsOnCall[i] = struct {
		result1 config.CFPropertiesBuilder
	}{result1}
}

func (fake *FakePropertiesProvider) TargetBoshPropertiesBuilder() config.BoshPropertiesBuilder {
	fake.targetBoshPropertiesBuilderMutex.Lock()
	ret, specificReturn := fake.targetBoshPropertiesBuilderReturnsOnCall[len(fake.targetBoshPropertiesBuilderArgsForCall)]
	fake.targetBoshPropertiesBuilderArgsForCall = append(fake.targetBoshPropertiesBuilderArgsForCall, struct {
	}{})
	stub := fake.TargetBoshPropertiesBuilderStub
	fakeReturns := fake.targetBoshPropertiesBuilderReturns
	fake.recordInvocation("TargetBoshPropertiesBuilder", []interface{}{})
	fake.targetBoshPropertiesBuilderMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePropertiesProvider) TargetBoshPropertiesBuilderCallCount() int {
	fake.targetBoshPropertiesBuilderMutex.RLock()
	defer fake.targetBoshPropertiesBuilderMutex.RUnlock()
	return len(fake.targetBoshPropertiesBuilderArgsForCall)
}

func (fake *FakePropertiesProvider) TargetBoshPropertiesBuilderCalls(stub func() config.BoshPropertiesBuilder) {
	fake.targetBoshPropertiesBuilderMutex.Lock()
	defer fake.targetBoshPropertiesBuilderMutex.Unlock()
	fake.TargetBoshPropertiesBuilderStub = stub
}

func (fake *FakePropertiesProvider) TargetBoshPropertiesBuilderReturns(result1 config.BoshPropertiesBuilder) {
	fake.targetBoshPropertiesBuilderMutex.Lock()
	defer fake.targetBoshPropertiesBuilderMutex.Unlock()
	fake.TargetBoshPropertiesBuilderStub = nil
	fake.targetBoshPropertiesBuilderReturns = struct {
		result1 config.BoshPropertiesBuilder
	}{result1}
}

func (fake *FakePropertiesProvider) TargetBoshPropertiesBuilderReturnsOnCall(i int, result1 config.BoshPropertiesBuilder) {
	fake.targetBoshPropertiesBuilderMutex.Lock()
	defer fake.targetBoshPropertiesBuilderMutex.Unlock()
	fake.TargetBoshPropertiesBuilderStub = nil
	if fake.targetBoshPropertiesBuilderReturnsOnCall == nil {
		fake.targetBoshPropertiesBuilderReturnsOnCall = make(map[int]struct {
			result1 config.BoshPropertiesBuilder
		})
	}
	fake.targetBoshPropertiesBuilderReturnsOnCall[i] = struct {
		result1 config.BoshPropertiesBuilder
	}{result1}
}

func (fake *FakePropertiesProvider) TargetCCDBPropertiesBuilder(arg1 config.BoshPropertiesBuilder) config.CCDBPropertiesBuilder {
	fake.targetCCDBPropertiesBuilderMutex.Lock()
	ret, specificReturn := fake.targetCCDBPropertiesBuilderReturnsOnCall[len(fake.targetCCDBPropertiesBuilderArgsForCall)]
	fake.targetCCDBPropertiesBuilderArgsForCall = append(fake.targetCCDBPropertiesBuilderArgsForCall, struct {
		arg1 config.BoshPropertiesBuilder
	}{arg1})
	stub := fake.TargetCCDBPropertiesBuilderStub
	fakeReturns := fake.targetCCDBPropertiesBuilderReturns
	fake.recordInvocation("TargetCCDBPropertiesBuilder", []interface{}{arg1})
	fake.targetCCDBPropertiesBuilderMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePropertiesProvider) TargetCCDBPropertiesBuilderCallCount() int {
	fake.targetCCDBPropertiesBuilderMutex.RLock()
	defer fake.targetCCDBPropertiesBuilderMutex.RUnlock()
	return len(fake.targetCCDBPropertiesBuilderArgsForCall)
}

func (fake *FakePropertiesProvider) TargetCCDBPropertiesBuilderCalls(stub func(config.BoshPropertiesBuilder) config.CCDBPropertiesBuilder) {
	fake.targetCCDBPropertiesBuilderMutex.Lock()
	defer fake.targetCCDBPropertiesBuilderMutex.Unlock()
	fake.TargetCCDBPropertiesBuilderStub = stub
}

func (fake *FakePropertiesProvider) TargetCCDBPropertiesBuilderArgsForCall(i int) config.BoshPropertiesBuilder {
	fake.targetCCDBPropertiesBuilderMutex.RLock()
	defer fake.targetCCDBPropertiesBuilderMutex.RUnlock()
	argsForCall := fake.targetCCDBPropertiesBuilderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePropertiesProvider) TargetCCDBPropertiesBuilderReturns(result1 config.CCDBPropertiesBuilder) {
	fake.targetCCDBPropertiesBuilderMutex.Lock()
	defer fake.targetCCDBPropertiesBuilderMutex.Unlock()
	fake.TargetCCDBPropertiesBuilderStub = nil
	fake.targetCCDBPropertiesBuilderReturns = struct {
		result1 config.CCDBPropertiesBuilder
	}{result1}
}

func (fake *FakePropertiesProvider) TargetCCDBPropertiesBuilderReturnsOnCall(i int, result1 config.CCDBPropertiesBuilder) {
	fake.targetCCDBPropertiesBuilderMutex.Lock()
	defer fake.targetCCDBPropertiesBuilderMutex.Unlock()
	fake.TargetCCDBPropertiesBuilderStub = nil
	if fake.targetCCDBPropertiesBuilderReturnsOnCall == nil {
		fake.targetCCDBPropertiesBuilderReturnsOnCall = make(map[int]struct {
			result1 config.CCDBPropertiesBuilder
		})
	}
	fake.targetCCDBPropertiesBuilderReturnsOnCall[i] = struct {
		result1 config.CCDBPropertiesBuilder
	}{result1}
}

func (fake *FakePropertiesProvider) TargetCFPropertiesBuilder() config.CFPropertiesBuilder {
	fake.targetCFPropertiesBuilderMutex.Lock()
	ret, specificReturn := fake.targetCFPropertiesBuilderReturnsOnCall[len(fake.targetCFPropertiesBuilderArgsForCall)]
	fake.targetCFPropertiesBuilderArgsForCall = append(fake.targetCFPropertiesBuilderArgsForCall, struct {
	}{})
	stub := fake.TargetCFPropertiesBuilderStub
	fakeReturns := fake.targetCFPropertiesBuilderReturns
	fake.recordInvocation("TargetCFPropertiesBuilder", []interface{}{})
	fake.targetCFPropertiesBuilderMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePropertiesProvider) TargetCFPropertiesBuilderCallCount() int {
	fake.targetCFPropertiesBuilderMutex.RLock()
	defer fake.targetCFPropertiesBuilderMutex.RUnlock()
	return len(fake.targetCFPropertiesBuilderArgsForCall)
}

func (fake *FakePropertiesProvider) TargetCFPropertiesBuilderCalls(stub func() config.CFPropertiesBuilder) {
	fake.targetCFPropertiesBuilderMutex.Lock()
	defer fake.targetCFPropertiesBuilderMutex.Unlock()
	fake.TargetCFPropertiesBuilderStub = stub
}

func (fake *FakePropertiesProvider) TargetCFPropertiesBuilderReturns(result1 config.CFPropertiesBuilder) {
	fake.targetCFPropertiesBuilderMutex.Lock()
	defer fake.targetCFPropertiesBuilderMutex.Unlock()
	fake.TargetCFPropertiesBuilderStub = nil
	fake.targetCFPropertiesBuilderReturns = struct {
		result1 config.CFPropertiesBuilder
	}{result1}
}

func (fake *FakePropertiesProvider) TargetCFPropertiesBuilderReturnsOnCall(i int, result1 config.CFPropertiesBuilder) {
	fake.targetCFPropertiesBuilderMutex.Lock()
	defer fake.targetCFPropertiesBuilderMutex.Unlock()
	fake.TargetCFPropertiesBuilderStub = nil
	if fake.targetCFPropertiesBuilderReturnsOnCall == nil {
		fake.targetCFPropertiesBuilderReturnsOnCall = make(map[int]struct {
			result1 config.CFPropertiesBuilder
		})
	}
	fake.targetCFPropertiesBuilderReturnsOnCall[i] = struct {
		result1 config.CFPropertiesBuilder
	}{result1}
}

func (fake *FakePropertiesProvider) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.environmentMutex.RLock()
	defer fake.environmentMutex.RUnlock()
	fake.sourceBoshPropertiesBuilderMutex.RLock()
	defer fake.sourceBoshPropertiesBuilderMutex.RUnlock()
	fake.sourceCCDBPropertiesBuilderMutex.RLock()
	defer fake.sourceCCDBPropertiesBuilderMutex.RUnlock()
	fake.sourceCFPropertiesBuilderMutex.RLock()
	defer fake.sourceCFPropertiesBuilderMutex.RUnlock()
	fake.targetBoshPropertiesBuilderMutex.RLock()
	defer fake.targetBoshPropertiesBuilderMutex.RUnlock()
	fake.targetCCDBPropertiesBuilderMutex.RLock()
	defer fake.targetCCDBPropertiesBuilderMutex.RUnlock()
	fake.targetCFPropertiesBuilderMutex.RLock()
	defer fake.targetCFPropertiesBuilderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePropertiesProvider) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.PropertiesProvider = new(FakePropertiesProvider)
