// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vmware-tanzu/service-instance-migrator-for-cloud-foundry/pkg/config"
)

type FakeMigrationDecoder struct {
	DecodeStub        func(config.Migration, string) interface{}
	decodeMutex       sync.RWMutex
	decodeArgsForCall []struct {
		arg1 config.Migration
		arg2 string
	}
	decodeReturns struct {
		result1 interface{}
	}
	decodeReturnsOnCall map[int]struct {
		result1 interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMigrationDecoder) Decode(arg1 config.Migration, arg2 string) interface{} {
	fake.decodeMutex.Lock()
	ret, specificReturn := fake.decodeReturnsOnCall[len(fake.decodeArgsForCall)]
	fake.decodeArgsForCall = append(fake.decodeArgsForCall, struct {
		arg1 config.Migration
		arg2 string
	}{arg1, arg2})
	stub := fake.DecodeStub
	fakeReturns := fake.decodeReturns
	fake.recordInvocation("Decode", []interface{}{arg1, arg2})
	fake.decodeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeMigrationDecoder) DecodeCallCount() int {
	fake.decodeMutex.RLock()
	defer fake.decodeMutex.RUnlock()
	return len(fake.decodeArgsForCall)
}

func (fake *FakeMigrationDecoder) DecodeCalls(stub func(config.Migration, string) interface{}) {
	fake.decodeMutex.Lock()
	defer fake.decodeMutex.Unlock()
	fake.DecodeStub = stub
}

func (fake *FakeMigrationDecoder) DecodeArgsForCall(i int) (config.Migration, string) {
	fake.decodeMutex.RLock()
	defer fake.decodeMutex.RUnlock()
	argsForCall := fake.decodeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeMigrationDecoder) DecodeReturns(result1 interface{}) {
	fake.decodeMutex.Lock()
	defer fake.decodeMutex.Unlock()
	fake.DecodeStub = nil
	fake.decodeReturns = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeMigrationDecoder) DecodeReturnsOnCall(i int, result1 interface{}) {
	fake.decodeMutex.Lock()
	defer fake.decodeMutex.Unlock()
	fake.DecodeStub = nil
	if fake.decodeReturnsOnCall == nil {
		fake.decodeReturnsOnCall = make(map[int]struct {
			result1 interface{}
		})
	}
	fake.decodeReturnsOnCall[i] = struct {
		result1 interface{}
	}{result1}
}

func (fake *FakeMigrationDecoder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.decodeMutex.RLock()
	defer fake.decodeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMigrationDecoder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ config.MigrationDecoder = new(FakeMigrationDecoder)
