// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	ioa "io"
	"os"
	"regexp"
	"sync"

	"github.com/vmware-tanzu/service-instance-migrator-for-cloud-foundry/pkg/io"
)

type FakeFileSystemOperations struct {
	CreateStub        func(string) (*os.File, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 string
	}
	createReturns struct {
		result1 *os.File
		result2 error
	}
	createReturnsOnCall map[int]struct {
		result1 *os.File
		result2 error
	}
	ExistsStub        func(string) (bool, error)
	existsMutex       sync.RWMutex
	existsArgsForCall []struct {
		arg1 string
	}
	existsReturns struct {
		result1 bool
		result2 error
	}
	existsReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	IsEmptyStub        func(string) (bool, error)
	isEmptyMutex       sync.RWMutex
	isEmptyArgsForCall []struct {
		arg1 string
	}
	isEmptyReturns struct {
		result1 bool
		result2 error
	}
	isEmptyReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	MkdirStub        func(string) error
	mkdirMutex       sync.RWMutex
	mkdirArgsForCall []struct {
		arg1 string
	}
	mkdirReturns struct {
		result1 error
	}
	mkdirReturnsOnCall map[int]struct {
		result1 error
	}
	OpenStub        func(string) (*os.File, error)
	openMutex       sync.RWMutex
	openArgsForCall []struct {
		arg1 string
	}
	openReturns struct {
		result1 *os.File
		result2 error
	}
	openReturnsOnCall map[int]struct {
		result1 *os.File
		result2 error
	}
	RenameStub        func(*regexp.Regexp, string, string) error
	renameMutex       sync.RWMutex
	renameArgsForCall []struct {
		arg1 *regexp.Regexp
		arg2 string
		arg3 string
	}
	renameReturns struct {
		result1 error
	}
	renameReturnsOnCall map[int]struct {
		result1 error
	}
	TarStub        func(string, ...ioa.Writer) error
	tarMutex       sync.RWMutex
	tarArgsForCall []struct {
		arg1 string
		arg2 []ioa.Writer
	}
	tarReturns struct {
		result1 error
	}
	tarReturnsOnCall map[int]struct {
		result1 error
	}
	UntarStub        func(string, ioa.Reader) error
	untarMutex       sync.RWMutex
	untarArgsForCall []struct {
		arg1 string
		arg2 ioa.Reader
	}
	untarReturns struct {
		result1 error
	}
	untarReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFileSystemOperations) Create(arg1 string) (*os.File, error) {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CreateStub
	fakeReturns := fake.createReturns
	fake.recordInvocation("Create", []interface{}{arg1})
	fake.createMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFileSystemOperations) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeFileSystemOperations) CreateCalls(stub func(string) (*os.File, error)) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = stub
}

func (fake *FakeFileSystemOperations) CreateArgsForCall(i int) string {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	argsForCall := fake.createArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFileSystemOperations) CreateReturns(result1 *os.File, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 *os.File
		result2 error
	}{result1, result2}
}

func (fake *FakeFileSystemOperations) CreateReturnsOnCall(i int, result1 *os.File, result2 error) {
	fake.createMutex.Lock()
	defer fake.createMutex.Unlock()
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 *os.File
			result2 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 *os.File
		result2 error
	}{result1, result2}
}

func (fake *FakeFileSystemOperations) Exists(arg1 string) (bool, error) {
	fake.existsMutex.Lock()
	ret, specificReturn := fake.existsReturnsOnCall[len(fake.existsArgsForCall)]
	fake.existsArgsForCall = append(fake.existsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ExistsStub
	fakeReturns := fake.existsReturns
	fake.recordInvocation("Exists", []interface{}{arg1})
	fake.existsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFileSystemOperations) ExistsCallCount() int {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	return len(fake.existsArgsForCall)
}

func (fake *FakeFileSystemOperations) ExistsCalls(stub func(string) (bool, error)) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = stub
}

func (fake *FakeFileSystemOperations) ExistsArgsForCall(i int) string {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	argsForCall := fake.existsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFileSystemOperations) ExistsReturns(result1 bool, result2 error) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = nil
	fake.existsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeFileSystemOperations) ExistsReturnsOnCall(i int, result1 bool, result2 error) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = nil
	if fake.existsReturnsOnCall == nil {
		fake.existsReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.existsReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeFileSystemOperations) IsEmpty(arg1 string) (bool, error) {
	fake.isEmptyMutex.Lock()
	ret, specificReturn := fake.isEmptyReturnsOnCall[len(fake.isEmptyArgsForCall)]
	fake.isEmptyArgsForCall = append(fake.isEmptyArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.IsEmptyStub
	fakeReturns := fake.isEmptyReturns
	fake.recordInvocation("IsEmpty", []interface{}{arg1})
	fake.isEmptyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFileSystemOperations) IsEmptyCallCount() int {
	fake.isEmptyMutex.RLock()
	defer fake.isEmptyMutex.RUnlock()
	return len(fake.isEmptyArgsForCall)
}

func (fake *FakeFileSystemOperations) IsEmptyCalls(stub func(string) (bool, error)) {
	fake.isEmptyMutex.Lock()
	defer fake.isEmptyMutex.Unlock()
	fake.IsEmptyStub = stub
}

func (fake *FakeFileSystemOperations) IsEmptyArgsForCall(i int) string {
	fake.isEmptyMutex.RLock()
	defer fake.isEmptyMutex.RUnlock()
	argsForCall := fake.isEmptyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFileSystemOperations) IsEmptyReturns(result1 bool, result2 error) {
	fake.isEmptyMutex.Lock()
	defer fake.isEmptyMutex.Unlock()
	fake.IsEmptyStub = nil
	fake.isEmptyReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeFileSystemOperations) IsEmptyReturnsOnCall(i int, result1 bool, result2 error) {
	fake.isEmptyMutex.Lock()
	defer fake.isEmptyMutex.Unlock()
	fake.IsEmptyStub = nil
	if fake.isEmptyReturnsOnCall == nil {
		fake.isEmptyReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isEmptyReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeFileSystemOperations) Mkdir(arg1 string) error {
	fake.mkdirMutex.Lock()
	ret, specificReturn := fake.mkdirReturnsOnCall[len(fake.mkdirArgsForCall)]
	fake.mkdirArgsForCall = append(fake.mkdirArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.MkdirStub
	fakeReturns := fake.mkdirReturns
	fake.recordInvocation("Mkdir", []interface{}{arg1})
	fake.mkdirMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFileSystemOperations) MkdirCallCount() int {
	fake.mkdirMutex.RLock()
	defer fake.mkdirMutex.RUnlock()
	return len(fake.mkdirArgsForCall)
}

func (fake *FakeFileSystemOperations) MkdirCalls(stub func(string) error) {
	fake.mkdirMutex.Lock()
	defer fake.mkdirMutex.Unlock()
	fake.MkdirStub = stub
}

func (fake *FakeFileSystemOperations) MkdirArgsForCall(i int) string {
	fake.mkdirMutex.RLock()
	defer fake.mkdirMutex.RUnlock()
	argsForCall := fake.mkdirArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFileSystemOperations) MkdirReturns(result1 error) {
	fake.mkdirMutex.Lock()
	defer fake.mkdirMutex.Unlock()
	fake.MkdirStub = nil
	fake.mkdirReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileSystemOperations) MkdirReturnsOnCall(i int, result1 error) {
	fake.mkdirMutex.Lock()
	defer fake.mkdirMutex.Unlock()
	fake.MkdirStub = nil
	if fake.mkdirReturnsOnCall == nil {
		fake.mkdirReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.mkdirReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileSystemOperations) Open(arg1 string) (*os.File, error) {
	fake.openMutex.Lock()
	ret, specificReturn := fake.openReturnsOnCall[len(fake.openArgsForCall)]
	fake.openArgsForCall = append(fake.openArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.OpenStub
	fakeReturns := fake.openReturns
	fake.recordInvocation("Open", []interface{}{arg1})
	fake.openMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFileSystemOperations) OpenCallCount() int {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	return len(fake.openArgsForCall)
}

func (fake *FakeFileSystemOperations) OpenCalls(stub func(string) (*os.File, error)) {
	fake.openMutex.Lock()
	defer fake.openMutex.Unlock()
	fake.OpenStub = stub
}

func (fake *FakeFileSystemOperations) OpenArgsForCall(i int) string {
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	argsForCall := fake.openArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeFileSystemOperations) OpenReturns(result1 *os.File, result2 error) {
	fake.openMutex.Lock()
	defer fake.openMutex.Unlock()
	fake.OpenStub = nil
	fake.openReturns = struct {
		result1 *os.File
		result2 error
	}{result1, result2}
}

func (fake *FakeFileSystemOperations) OpenReturnsOnCall(i int, result1 *os.File, result2 error) {
	fake.openMutex.Lock()
	defer fake.openMutex.Unlock()
	fake.OpenStub = nil
	if fake.openReturnsOnCall == nil {
		fake.openReturnsOnCall = make(map[int]struct {
			result1 *os.File
			result2 error
		})
	}
	fake.openReturnsOnCall[i] = struct {
		result1 *os.File
		result2 error
	}{result1, result2}
}

func (fake *FakeFileSystemOperations) Rename(arg1 *regexp.Regexp, arg2 string, arg3 string) error {
	fake.renameMutex.Lock()
	ret, specificReturn := fake.renameReturnsOnCall[len(fake.renameArgsForCall)]
	fake.renameArgsForCall = append(fake.renameArgsForCall, struct {
		arg1 *regexp.Regexp
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.RenameStub
	fakeReturns := fake.renameReturns
	fake.recordInvocation("Rename", []interface{}{arg1, arg2, arg3})
	fake.renameMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFileSystemOperations) RenameCallCount() int {
	fake.renameMutex.RLock()
	defer fake.renameMutex.RUnlock()
	return len(fake.renameArgsForCall)
}

func (fake *FakeFileSystemOperations) RenameCalls(stub func(*regexp.Regexp, string, string) error) {
	fake.renameMutex.Lock()
	defer fake.renameMutex.Unlock()
	fake.RenameStub = stub
}

func (fake *FakeFileSystemOperations) RenameArgsForCall(i int) (*regexp.Regexp, string, string) {
	fake.renameMutex.RLock()
	defer fake.renameMutex.RUnlock()
	argsForCall := fake.renameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFileSystemOperations) RenameReturns(result1 error) {
	fake.renameMutex.Lock()
	defer fake.renameMutex.Unlock()
	fake.RenameStub = nil
	fake.renameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileSystemOperations) RenameReturnsOnCall(i int, result1 error) {
	fake.renameMutex.Lock()
	defer fake.renameMutex.Unlock()
	fake.RenameStub = nil
	if fake.renameReturnsOnCall == nil {
		fake.renameReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.renameReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileSystemOperations) Tar(arg1 string, arg2 ...ioa.Writer) error {
	fake.tarMutex.Lock()
	ret, specificReturn := fake.tarReturnsOnCall[len(fake.tarArgsForCall)]
	fake.tarArgsForCall = append(fake.tarArgsForCall, struct {
		arg1 string
		arg2 []ioa.Writer
	}{arg1, arg2})
	stub := fake.TarStub
	fakeReturns := fake.tarReturns
	fake.recordInvocation("Tar", []interface{}{arg1, arg2})
	fake.tarMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFileSystemOperations) TarCallCount() int {
	fake.tarMutex.RLock()
	defer fake.tarMutex.RUnlock()
	return len(fake.tarArgsForCall)
}

func (fake *FakeFileSystemOperations) TarCalls(stub func(string, ...ioa.Writer) error) {
	fake.tarMutex.Lock()
	defer fake.tarMutex.Unlock()
	fake.TarStub = stub
}

func (fake *FakeFileSystemOperations) TarArgsForCall(i int) (string, []ioa.Writer) {
	fake.tarMutex.RLock()
	defer fake.tarMutex.RUnlock()
	argsForCall := fake.tarArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFileSystemOperations) TarReturns(result1 error) {
	fake.tarMutex.Lock()
	defer fake.tarMutex.Unlock()
	fake.TarStub = nil
	fake.tarReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileSystemOperations) TarReturnsOnCall(i int, result1 error) {
	fake.tarMutex.Lock()
	defer fake.tarMutex.Unlock()
	fake.TarStub = nil
	if fake.tarReturnsOnCall == nil {
		fake.tarReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.tarReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileSystemOperations) Untar(arg1 string, arg2 ioa.Reader) error {
	fake.untarMutex.Lock()
	ret, specificReturn := fake.untarReturnsOnCall[len(fake.untarArgsForCall)]
	fake.untarArgsForCall = append(fake.untarArgsForCall, struct {
		arg1 string
		arg2 ioa.Reader
	}{arg1, arg2})
	stub := fake.UntarStub
	fakeReturns := fake.untarReturns
	fake.recordInvocation("Untar", []interface{}{arg1, arg2})
	fake.untarMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeFileSystemOperations) UntarCallCount() int {
	fake.untarMutex.RLock()
	defer fake.untarMutex.RUnlock()
	return len(fake.untarArgsForCall)
}

func (fake *FakeFileSystemOperations) UntarCalls(stub func(string, ioa.Reader) error) {
	fake.untarMutex.Lock()
	defer fake.untarMutex.Unlock()
	fake.UntarStub = stub
}

func (fake *FakeFileSystemOperations) UntarArgsForCall(i int) (string, ioa.Reader) {
	fake.untarMutex.RLock()
	defer fake.untarMutex.RUnlock()
	argsForCall := fake.untarArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFileSystemOperations) UntarReturns(result1 error) {
	fake.untarMutex.Lock()
	defer fake.untarMutex.Unlock()
	fake.UntarStub = nil
	fake.untarReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileSystemOperations) UntarReturnsOnCall(i int, result1 error) {
	fake.untarMutex.Lock()
	defer fake.untarMutex.Unlock()
	fake.UntarStub = nil
	if fake.untarReturnsOnCall == nil {
		fake.untarReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.untarReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeFileSystemOperations) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	fake.isEmptyMutex.RLock()
	defer fake.isEmptyMutex.RUnlock()
	fake.mkdirMutex.RLock()
	defer fake.mkdirMutex.RUnlock()
	fake.openMutex.RLock()
	defer fake.openMutex.RUnlock()
	fake.renameMutex.RLock()
	defer fake.renameMutex.RUnlock()
	fake.tarMutex.RLock()
	defer fake.tarMutex.RUnlock()
	fake.untarMutex.RLock()
	defer fake.untarMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFileSystemOperations) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ io.FileSystemOperations = new(FakeFileSystemOperations)
