/* 
 *  Copyright 2022 VMware, Inc.
 *  
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"net/http"
	"net/url"
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/vmware-tanzu/service-instance-migrator-for-cloud-foundry/pkg/cf"
)

type FakeClient struct {
	AppByNameStub        func(string, string, string) (cfclient.App, error)
	appByNameMutex       sync.RWMutex
	appByNameArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	appByNameReturns struct {
		result1 cfclient.App
		result2 error
	}
	appByNameReturnsOnCall map[int]struct {
		result1 cfclient.App
		result2 error
	}
	CreateAppStub        func(cfclient.AppCreateRequest) (cfclient.App, error)
	createAppMutex       sync.RWMutex
	createAppArgsForCall []struct {
		arg1 cfclient.AppCreateRequest
	}
	createAppReturns struct {
		result1 cfclient.App
		result2 error
	}
	createAppReturnsOnCall map[int]struct {
		result1 cfclient.App
		result2 error
	}
	CreateOrgStub        func(cfclient.OrgRequest) (cfclient.Org, error)
	createOrgMutex       sync.RWMutex
	createOrgArgsForCall []struct {
		arg1 cfclient.OrgRequest
	}
	createOrgReturns struct {
		result1 cfclient.Org
		result2 error
	}
	createOrgReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	CreateServiceBindingStub        func(string, string) (*cfclient.ServiceBinding, error)
	createServiceBindingMutex       sync.RWMutex
	createServiceBindingArgsForCall []struct {
		arg1 string
		arg2 string
	}
	createServiceBindingReturns struct {
		result1 *cfclient.ServiceBinding
		result2 error
	}
	createServiceBindingReturnsOnCall map[int]struct {
		result1 *cfclient.ServiceBinding
		result2 error
	}
	CreateServiceInstanceStub        func(cfclient.ServiceInstanceRequest) (cfclient.ServiceInstance, error)
	createServiceInstanceMutex       sync.RWMutex
	createServiceInstanceArgsForCall []struct {
		arg1 cfclient.ServiceInstanceRequest
	}
	createServiceInstanceReturns struct {
		result1 cfclient.ServiceInstance
		result2 error
	}
	createServiceInstanceReturnsOnCall map[int]struct {
		result1 cfclient.ServiceInstance
		result2 error
	}
	CreateServiceKeyStub        func(cfclient.CreateServiceKeyRequest) (cfclient.ServiceKey, error)
	createServiceKeyMutex       sync.RWMutex
	createServiceKeyArgsForCall []struct {
		arg1 cfclient.CreateServiceKeyRequest
	}
	createServiceKeyReturns struct {
		result1 cfclient.ServiceKey
		result2 error
	}
	createServiceKeyReturnsOnCall map[int]struct {
		result1 cfclient.ServiceKey
		result2 error
	}
	CreateSpaceStub        func(cfclient.SpaceRequest) (cfclient.Space, error)
	createSpaceMutex       sync.RWMutex
	createSpaceArgsForCall []struct {
		arg1 cfclient.SpaceRequest
	}
	createSpaceReturns struct {
		result1 cfclient.Space
		result2 error
	}
	createSpaceReturnsOnCall map[int]struct {
		result1 cfclient.Space
		result2 error
	}
	CreateUserProvidedServiceInstanceStub        func(cfclient.UserProvidedServiceInstanceRequest) (*cfclient.UserProvidedServiceInstance, error)
	createUserProvidedServiceInstanceMutex       sync.RWMutex
	createUserProvidedServiceInstanceArgsForCall []struct {
		arg1 cfclient.UserProvidedServiceInstanceRequest
	}
	createUserProvidedServiceInstanceReturns struct {
		result1 *cfclient.UserProvidedServiceInstance
		result2 error
	}
	createUserProvidedServiceInstanceReturnsOnCall map[int]struct {
		result1 *cfclient.UserProvidedServiceInstance
		result2 error
	}
	DeleteAppStub        func(string) error
	deleteAppMutex       sync.RWMutex
	deleteAppArgsForCall []struct {
		arg1 string
	}
	deleteAppReturns struct {
		result1 error
	}
	deleteAppReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteOrgStub        func(string, bool, bool) error
	deleteOrgMutex       sync.RWMutex
	deleteOrgArgsForCall []struct {
		arg1 string
		arg2 bool
		arg3 bool
	}
	deleteOrgReturns struct {
		result1 error
	}
	deleteOrgReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteServiceBindingStub        func(string) error
	deleteServiceBindingMutex       sync.RWMutex
	deleteServiceBindingArgsForCall []struct {
		arg1 string
	}
	deleteServiceBindingReturns struct {
		result1 error
	}
	deleteServiceBindingReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteServiceInstanceStub        func(string, bool, bool) error
	deleteServiceInstanceMutex       sync.RWMutex
	deleteServiceInstanceArgsForCall []struct {
		arg1 string
		arg2 bool
		arg3 bool
	}
	deleteServiceInstanceReturns struct {
		result1 error
	}
	deleteServiceInstanceReturnsOnCall map[int]struct {
		result1 error
	}
	DoRequestStub        func(*cfclient.Request) (*http.Response, error)
	doRequestMutex       sync.RWMutex
	doRequestArgsForCall []struct {
		arg1 *cfclient.Request
	}
	doRequestReturns struct {
		result1 *http.Response
		result2 error
	}
	doRequestReturnsOnCall map[int]struct {
		result1 *http.Response
		result2 error
	}
	DoWithRetryStub        func(func() error) error
	doWithRetryMutex       sync.RWMutex
	doWithRetryArgsForCall []struct {
		arg1 func() error
	}
	doWithRetryReturns struct {
		result1 error
	}
	doWithRetryReturnsOnCall map[int]struct {
		result1 error
	}
	GetAppByGuidNoInlineCallStub        func(string) (cfclient.App, error)
	getAppByGuidNoInlineCallMutex       sync.RWMutex
	getAppByGuidNoInlineCallArgsForCall []struct {
		arg1 string
	}
	getAppByGuidNoInlineCallReturns struct {
		result1 cfclient.App
		result2 error
	}
	getAppByGuidNoInlineCallReturnsOnCall map[int]struct {
		result1 cfclient.App
		result2 error
	}
	GetClientConfigStub        func() *cfclient.Config
	getClientConfigMutex       sync.RWMutex
	getClientConfigArgsForCall []struct {
	}
	getClientConfigReturns struct {
		result1 *cfclient.Config
	}
	getClientConfigReturnsOnCall map[int]struct {
		result1 *cfclient.Config
	}
	GetOrgByGuidStub        func(string) (cfclient.Org, error)
	getOrgByGuidMutex       sync.RWMutex
	getOrgByGuidArgsForCall []struct {
		arg1 string
	}
	getOrgByGuidReturns struct {
		result1 cfclient.Org
		result2 error
	}
	getOrgByGuidReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	GetOrgByNameStub        func(string) (cfclient.Org, error)
	getOrgByNameMutex       sync.RWMutex
	getOrgByNameArgsForCall []struct {
		arg1 string
	}
	getOrgByNameReturns struct {
		result1 cfclient.Org
		result2 error
	}
	getOrgByNameReturnsOnCall map[int]struct {
		result1 cfclient.Org
		result2 error
	}
	GetServiceByGuidStub        func(string) (cfclient.Service, error)
	getServiceByGuidMutex       sync.RWMutex
	getServiceByGuidArgsForCall []struct {
		arg1 string
	}
	getServiceByGuidReturns struct {
		result1 cfclient.Service
		result2 error
	}
	getServiceByGuidReturnsOnCall map[int]struct {
		result1 cfclient.Service
		result2 error
	}
	GetServiceInstanceByGuidStub        func(string) (cfclient.ServiceInstance, error)
	getServiceInstanceByGuidMutex       sync.RWMutex
	getServiceInstanceByGuidArgsForCall []struct {
		arg1 string
	}
	getServiceInstanceByGuidReturns struct {
		result1 cfclient.ServiceInstance
		result2 error
	}
	getServiceInstanceByGuidReturnsOnCall map[int]struct {
		result1 cfclient.ServiceInstance
		result2 error
	}
	GetServiceInstanceParamsStub        func(string) (map[string]interface{}, error)
	getServiceInstanceParamsMutex       sync.RWMutex
	getServiceInstanceParamsArgsForCall []struct {
		arg1 string
	}
	getServiceInstanceParamsReturns struct {
		result1 map[string]interface{}
		result2 error
	}
	getServiceInstanceParamsReturnsOnCall map[int]struct {
		result1 map[string]interface{}
		result2 error
	}
	GetServicePlanByGUIDStub        func(string) (*cfclient.ServicePlan, error)
	getServicePlanByGUIDMutex       sync.RWMutex
	getServicePlanByGUIDArgsForCall []struct {
		arg1 string
	}
	getServicePlanByGUIDReturns struct {
		result1 *cfclient.ServicePlan
		result2 error
	}
	getServicePlanByGUIDReturnsOnCall map[int]struct {
		result1 *cfclient.ServicePlan
		result2 error
	}
	GetSpaceByGuidStub        func(string) (cfclient.Space, error)
	getSpaceByGuidMutex       sync.RWMutex
	getSpaceByGuidArgsForCall []struct {
		arg1 string
	}
	getSpaceByGuidReturns struct {
		result1 cfclient.Space
		result2 error
	}
	getSpaceByGuidReturnsOnCall map[int]struct {
		result1 cfclient.Space
		result2 error
	}
	GetSpaceByNameStub        func(string, string) (cfclient.Space, error)
	getSpaceByNameMutex       sync.RWMutex
	getSpaceByNameArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getSpaceByNameReturns struct {
		result1 cfclient.Space
		result2 error
	}
	getSpaceByNameReturnsOnCall map[int]struct {
		result1 cfclient.Space
		result2 error
	}
	GetUserProvidedServiceInstanceByGuidStub        func(string) (cfclient.UserProvidedServiceInstance, error)
	getUserProvidedServiceInstanceByGuidMutex       sync.RWMutex
	getUserProvidedServiceInstanceByGuidArgsForCall []struct {
		arg1 string
	}
	getUserProvidedServiceInstanceByGuidReturns struct {
		result1 cfclient.UserProvidedServiceInstance
		result2 error
	}
	getUserProvidedServiceInstanceByGuidReturnsOnCall map[int]struct {
		result1 cfclient.UserProvidedServiceInstance
		result2 error
	}
	ListOrgsStub        func() ([]cfclient.Org, error)
	listOrgsMutex       sync.RWMutex
	listOrgsArgsForCall []struct {
	}
	listOrgsReturns struct {
		result1 []cfclient.Org
		result2 error
	}
	listOrgsReturnsOnCall map[int]struct {
		result1 []cfclient.Org
		result2 error
	}
	ListServiceBindingsByQueryStub        func(url.Values) ([]cfclient.ServiceBinding, error)
	listServiceBindingsByQueryMutex       sync.RWMutex
	listServiceBindingsByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServiceBindingsByQueryReturns struct {
		result1 []cfclient.ServiceBinding
		result2 error
	}
	listServiceBindingsByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceBinding
		result2 error
	}
	ListServiceBrokersStub        func() ([]cfclient.ServiceBroker, error)
	listServiceBrokersMutex       sync.RWMutex
	listServiceBrokersArgsForCall []struct {
	}
	listServiceBrokersReturns struct {
		result1 []cfclient.ServiceBroker
		result2 error
	}
	listServiceBrokersReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceBroker
		result2 error
	}
	ListServiceInstancesByQueryStub        func(url.Values) ([]cfclient.ServiceInstance, error)
	listServiceInstancesByQueryMutex       sync.RWMutex
	listServiceInstancesByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServiceInstancesByQueryReturns struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}
	listServiceInstancesByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}
	ListServiceKeysByQueryStub        func(url.Values) ([]cfclient.ServiceKey, error)
	listServiceKeysByQueryMutex       sync.RWMutex
	listServiceKeysByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServiceKeysByQueryReturns struct {
		result1 []cfclient.ServiceKey
		result2 error
	}
	listServiceKeysByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceKey
		result2 error
	}
	ListServicePlansStub        func() ([]cfclient.ServicePlan, error)
	listServicePlansMutex       sync.RWMutex
	listServicePlansArgsForCall []struct {
	}
	listServicePlansReturns struct {
		result1 []cfclient.ServicePlan
		result2 error
	}
	listServicePlansReturnsOnCall map[int]struct {
		result1 []cfclient.ServicePlan
		result2 error
	}
	ListServicePlansByQueryStub        func(url.Values) ([]cfclient.ServicePlan, error)
	listServicePlansByQueryMutex       sync.RWMutex
	listServicePlansByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listServicePlansByQueryReturns struct {
		result1 []cfclient.ServicePlan
		result2 error
	}
	listServicePlansByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.ServicePlan
		result2 error
	}
	ListServicesStub        func() ([]cfclient.Service, error)
	listServicesMutex       sync.RWMutex
	listServicesArgsForCall []struct {
	}
	listServicesReturns struct {
		result1 []cfclient.Service
		result2 error
	}
	listServicesReturnsOnCall map[int]struct {
		result1 []cfclient.Service
		result2 error
	}
	ListSpaceServiceInstancesStub        func(string) ([]cfclient.ServiceInstance, error)
	listSpaceServiceInstancesMutex       sync.RWMutex
	listSpaceServiceInstancesArgsForCall []struct {
		arg1 string
	}
	listSpaceServiceInstancesReturns struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}
	listSpaceServiceInstancesReturnsOnCall map[int]struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}
	ListSpacesStub        func() ([]cfclient.Space, error)
	listSpacesMutex       sync.RWMutex
	listSpacesArgsForCall []struct {
	}
	listSpacesReturns struct {
		result1 []cfclient.Space
		result2 error
	}
	listSpacesReturnsOnCall map[int]struct {
		result1 []cfclient.Space
		result2 error
	}
	ListSpacesByQueryStub        func(url.Values) ([]cfclient.Space, error)
	listSpacesByQueryMutex       sync.RWMutex
	listSpacesByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listSpacesByQueryReturns struct {
		result1 []cfclient.Space
		result2 error
	}
	listSpacesByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.Space
		result2 error
	}
	ListUserProvidedServiceInstancesByQueryStub        func(url.Values) ([]cfclient.UserProvidedServiceInstance, error)
	listUserProvidedServiceInstancesByQueryMutex       sync.RWMutex
	listUserProvidedServiceInstancesByQueryArgsForCall []struct {
		arg1 url.Values
	}
	listUserProvidedServiceInstancesByQueryReturns struct {
		result1 []cfclient.UserProvidedServiceInstance
		result2 error
	}
	listUserProvidedServiceInstancesByQueryReturnsOnCall map[int]struct {
		result1 []cfclient.UserProvidedServiceInstance
		result2 error
	}
	NewRequestStub        func(string, string) *cfclient.Request
	newRequestMutex       sync.RWMutex
	newRequestArgsForCall []struct {
		arg1 string
		arg2 string
	}
	newRequestReturns struct {
		result1 *cfclient.Request
	}
	newRequestReturnsOnCall map[int]struct {
		result1 *cfclient.Request
	}
	UpdateSIStub        func(string, cfclient.ServiceInstanceUpdateRequest, bool) error
	updateSIMutex       sync.RWMutex
	updateSIArgsForCall []struct {
		arg1 string
		arg2 cfclient.ServiceInstanceUpdateRequest
		arg3 bool
	}
	updateSIReturns struct {
		result1 error
	}
	updateSIReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateUserProvidedServiceInstanceStub        func(string, cfclient.UserProvidedServiceInstanceRequest) (*cfclient.UserProvidedServiceInstance, error)
	updateUserProvidedServiceInstanceMutex       sync.RWMutex
	updateUserProvidedServiceInstanceArgsForCall []struct {
		arg1 string
		arg2 cfclient.UserProvidedServiceInstanceRequest
	}
	updateUserProvidedServiceInstanceReturns struct {
		result1 *cfclient.UserProvidedServiceInstance
		result2 error
	}
	updateUserProvidedServiceInstanceReturnsOnCall map[int]struct {
		result1 *cfclient.UserProvidedServiceInstance
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) AppByName(arg1 string, arg2 string, arg3 string) (cfclient.App, error) {
	fake.appByNameMutex.Lock()
	ret, specificReturn := fake.appByNameReturnsOnCall[len(fake.appByNameArgsForCall)]
	fake.appByNameArgsForCall = append(fake.appByNameArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.AppByNameStub
	fakeReturns := fake.appByNameReturns
	fake.recordInvocation("AppByName", []interface{}{arg1, arg2, arg3})
	fake.appByNameMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) AppByNameCallCount() int {
	fake.appByNameMutex.RLock()
	defer fake.appByNameMutex.RUnlock()
	return len(fake.appByNameArgsForCall)
}

func (fake *FakeClient) AppByNameCalls(stub func(string, string, string) (cfclient.App, error)) {
	fake.appByNameMutex.Lock()
	defer fake.appByNameMutex.Unlock()
	fake.AppByNameStub = stub
}

func (fake *FakeClient) AppByNameArgsForCall(i int) (string, string, string) {
	fake.appByNameMutex.RLock()
	defer fake.appByNameMutex.RUnlock()
	argsForCall := fake.appByNameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) AppByNameReturns(result1 cfclient.App, result2 error) {
	fake.appByNameMutex.Lock()
	defer fake.appByNameMutex.Unlock()
	fake.AppByNameStub = nil
	fake.appByNameReturns = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) AppByNameReturnsOnCall(i int, result1 cfclient.App, result2 error) {
	fake.appByNameMutex.Lock()
	defer fake.appByNameMutex.Unlock()
	fake.AppByNameStub = nil
	if fake.appByNameReturnsOnCall == nil {
		fake.appByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.App
			result2 error
		})
	}
	fake.appByNameReturnsOnCall[i] = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateApp(arg1 cfclient.AppCreateRequest) (cfclient.App, error) {
	fake.createAppMutex.Lock()
	ret, specificReturn := fake.createAppReturnsOnCall[len(fake.createAppArgsForCall)]
	fake.createAppArgsForCall = append(fake.createAppArgsForCall, struct {
		arg1 cfclient.AppCreateRequest
	}{arg1})
	stub := fake.CreateAppStub
	fakeReturns := fake.createAppReturns
	fake.recordInvocation("CreateApp", []interface{}{arg1})
	fake.createAppMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) CreateAppCallCount() int {
	fake.createAppMutex.RLock()
	defer fake.createAppMutex.RUnlock()
	return len(fake.createAppArgsForCall)
}

func (fake *FakeClient) CreateAppCalls(stub func(cfclient.AppCreateRequest) (cfclient.App, error)) {
	fake.createAppMutex.Lock()
	defer fake.createAppMutex.Unlock()
	fake.CreateAppStub = stub
}

func (fake *FakeClient) CreateAppArgsForCall(i int) cfclient.AppCreateRequest {
	fake.createAppMutex.RLock()
	defer fake.createAppMutex.RUnlock()
	argsForCall := fake.createAppArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) CreateAppReturns(result1 cfclient.App, result2 error) {
	fake.createAppMutex.Lock()
	defer fake.createAppMutex.Unlock()
	fake.CreateAppStub = nil
	fake.createAppReturns = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateAppReturnsOnCall(i int, result1 cfclient.App, result2 error) {
	fake.createAppMutex.Lock()
	defer fake.createAppMutex.Unlock()
	fake.CreateAppStub = nil
	if fake.createAppReturnsOnCall == nil {
		fake.createAppReturnsOnCall = make(map[int]struct {
			result1 cfclient.App
			result2 error
		})
	}
	fake.createAppReturnsOnCall[i] = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateOrg(arg1 cfclient.OrgRequest) (cfclient.Org, error) {
	fake.createOrgMutex.Lock()
	ret, specificReturn := fake.createOrgReturnsOnCall[len(fake.createOrgArgsForCall)]
	fake.createOrgArgsForCall = append(fake.createOrgArgsForCall, struct {
		arg1 cfclient.OrgRequest
	}{arg1})
	stub := fake.CreateOrgStub
	fakeReturns := fake.createOrgReturns
	fake.recordInvocation("CreateOrg", []interface{}{arg1})
	fake.createOrgMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) CreateOrgCallCount() int {
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	return len(fake.createOrgArgsForCall)
}

func (fake *FakeClient) CreateOrgCalls(stub func(cfclient.OrgRequest) (cfclient.Org, error)) {
	fake.createOrgMutex.Lock()
	defer fake.createOrgMutex.Unlock()
	fake.CreateOrgStub = stub
}

func (fake *FakeClient) CreateOrgArgsForCall(i int) cfclient.OrgRequest {
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	argsForCall := fake.createOrgArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) CreateOrgReturns(result1 cfclient.Org, result2 error) {
	fake.createOrgMutex.Lock()
	defer fake.createOrgMutex.Unlock()
	fake.CreateOrgStub = nil
	fake.createOrgReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateOrgReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.createOrgMutex.Lock()
	defer fake.createOrgMutex.Unlock()
	fake.CreateOrgStub = nil
	if fake.createOrgReturnsOnCall == nil {
		fake.createOrgReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.createOrgReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateServiceBinding(arg1 string, arg2 string) (*cfclient.ServiceBinding, error) {
	fake.createServiceBindingMutex.Lock()
	ret, specificReturn := fake.createServiceBindingReturnsOnCall[len(fake.createServiceBindingArgsForCall)]
	fake.createServiceBindingArgsForCall = append(fake.createServiceBindingArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.CreateServiceBindingStub
	fakeReturns := fake.createServiceBindingReturns
	fake.recordInvocation("CreateServiceBinding", []interface{}{arg1, arg2})
	fake.createServiceBindingMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) CreateServiceBindingCallCount() int {
	fake.createServiceBindingMutex.RLock()
	defer fake.createServiceBindingMutex.RUnlock()
	return len(fake.createServiceBindingArgsForCall)
}

func (fake *FakeClient) CreateServiceBindingCalls(stub func(string, string) (*cfclient.ServiceBinding, error)) {
	fake.createServiceBindingMutex.Lock()
	defer fake.createServiceBindingMutex.Unlock()
	fake.CreateServiceBindingStub = stub
}

func (fake *FakeClient) CreateServiceBindingArgsForCall(i int) (string, string) {
	fake.createServiceBindingMutex.RLock()
	defer fake.createServiceBindingMutex.RUnlock()
	argsForCall := fake.createServiceBindingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) CreateServiceBindingReturns(result1 *cfclient.ServiceBinding, result2 error) {
	fake.createServiceBindingMutex.Lock()
	defer fake.createServiceBindingMutex.Unlock()
	fake.CreateServiceBindingStub = nil
	fake.createServiceBindingReturns = struct {
		result1 *cfclient.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateServiceBindingReturnsOnCall(i int, result1 *cfclient.ServiceBinding, result2 error) {
	fake.createServiceBindingMutex.Lock()
	defer fake.createServiceBindingMutex.Unlock()
	fake.CreateServiceBindingStub = nil
	if fake.createServiceBindingReturnsOnCall == nil {
		fake.createServiceBindingReturnsOnCall = make(map[int]struct {
			result1 *cfclient.ServiceBinding
			result2 error
		})
	}
	fake.createServiceBindingReturnsOnCall[i] = struct {
		result1 *cfclient.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateServiceInstance(arg1 cfclient.ServiceInstanceRequest) (cfclient.ServiceInstance, error) {
	fake.createServiceInstanceMutex.Lock()
	ret, specificReturn := fake.createServiceInstanceReturnsOnCall[len(fake.createServiceInstanceArgsForCall)]
	fake.createServiceInstanceArgsForCall = append(fake.createServiceInstanceArgsForCall, struct {
		arg1 cfclient.ServiceInstanceRequest
	}{arg1})
	stub := fake.CreateServiceInstanceStub
	fakeReturns := fake.createServiceInstanceReturns
	fake.recordInvocation("CreateServiceInstance", []interface{}{arg1})
	fake.createServiceInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) CreateServiceInstanceCallCount() int {
	fake.createServiceInstanceMutex.RLock()
	defer fake.createServiceInstanceMutex.RUnlock()
	return len(fake.createServiceInstanceArgsForCall)
}

func (fake *FakeClient) CreateServiceInstanceCalls(stub func(cfclient.ServiceInstanceRequest) (cfclient.ServiceInstance, error)) {
	fake.createServiceInstanceMutex.Lock()
	defer fake.createServiceInstanceMutex.Unlock()
	fake.CreateServiceInstanceStub = stub
}

func (fake *FakeClient) CreateServiceInstanceArgsForCall(i int) cfclient.ServiceInstanceRequest {
	fake.createServiceInstanceMutex.RLock()
	defer fake.createServiceInstanceMutex.RUnlock()
	argsForCall := fake.createServiceInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) CreateServiceInstanceReturns(result1 cfclient.ServiceInstance, result2 error) {
	fake.createServiceInstanceMutex.Lock()
	defer fake.createServiceInstanceMutex.Unlock()
	fake.CreateServiceInstanceStub = nil
	fake.createServiceInstanceReturns = struct {
		result1 cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateServiceInstanceReturnsOnCall(i int, result1 cfclient.ServiceInstance, result2 error) {
	fake.createServiceInstanceMutex.Lock()
	defer fake.createServiceInstanceMutex.Unlock()
	fake.CreateServiceInstanceStub = nil
	if fake.createServiceInstanceReturnsOnCall == nil {
		fake.createServiceInstanceReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServiceInstance
			result2 error
		})
	}
	fake.createServiceInstanceReturnsOnCall[i] = struct {
		result1 cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateServiceKey(arg1 cfclient.CreateServiceKeyRequest) (cfclient.ServiceKey, error) {
	fake.createServiceKeyMutex.Lock()
	ret, specificReturn := fake.createServiceKeyReturnsOnCall[len(fake.createServiceKeyArgsForCall)]
	fake.createServiceKeyArgsForCall = append(fake.createServiceKeyArgsForCall, struct {
		arg1 cfclient.CreateServiceKeyRequest
	}{arg1})
	stub := fake.CreateServiceKeyStub
	fakeReturns := fake.createServiceKeyReturns
	fake.recordInvocation("CreateServiceKey", []interface{}{arg1})
	fake.createServiceKeyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) CreateServiceKeyCallCount() int {
	fake.createServiceKeyMutex.RLock()
	defer fake.createServiceKeyMutex.RUnlock()
	return len(fake.createServiceKeyArgsForCall)
}

func (fake *FakeClient) CreateServiceKeyCalls(stub func(cfclient.CreateServiceKeyRequest) (cfclient.ServiceKey, error)) {
	fake.createServiceKeyMutex.Lock()
	defer fake.createServiceKeyMutex.Unlock()
	fake.CreateServiceKeyStub = stub
}

func (fake *FakeClient) CreateServiceKeyArgsForCall(i int) cfclient.CreateServiceKeyRequest {
	fake.createServiceKeyMutex.RLock()
	defer fake.createServiceKeyMutex.RUnlock()
	argsForCall := fake.createServiceKeyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) CreateServiceKeyReturns(result1 cfclient.ServiceKey, result2 error) {
	fake.createServiceKeyMutex.Lock()
	defer fake.createServiceKeyMutex.Unlock()
	fake.CreateServiceKeyStub = nil
	fake.createServiceKeyReturns = struct {
		result1 cfclient.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateServiceKeyReturnsOnCall(i int, result1 cfclient.ServiceKey, result2 error) {
	fake.createServiceKeyMutex.Lock()
	defer fake.createServiceKeyMutex.Unlock()
	fake.CreateServiceKeyStub = nil
	if fake.createServiceKeyReturnsOnCall == nil {
		fake.createServiceKeyReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServiceKey
			result2 error
		})
	}
	fake.createServiceKeyReturnsOnCall[i] = struct {
		result1 cfclient.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateSpace(arg1 cfclient.SpaceRequest) (cfclient.Space, error) {
	fake.createSpaceMutex.Lock()
	ret, specificReturn := fake.createSpaceReturnsOnCall[len(fake.createSpaceArgsForCall)]
	fake.createSpaceArgsForCall = append(fake.createSpaceArgsForCall, struct {
		arg1 cfclient.SpaceRequest
	}{arg1})
	stub := fake.CreateSpaceStub
	fakeReturns := fake.createSpaceReturns
	fake.recordInvocation("CreateSpace", []interface{}{arg1})
	fake.createSpaceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) CreateSpaceCallCount() int {
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	return len(fake.createSpaceArgsForCall)
}

func (fake *FakeClient) CreateSpaceCalls(stub func(cfclient.SpaceRequest) (cfclient.Space, error)) {
	fake.createSpaceMutex.Lock()
	defer fake.createSpaceMutex.Unlock()
	fake.CreateSpaceStub = stub
}

func (fake *FakeClient) CreateSpaceArgsForCall(i int) cfclient.SpaceRequest {
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	argsForCall := fake.createSpaceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) CreateSpaceReturns(result1 cfclient.Space, result2 error) {
	fake.createSpaceMutex.Lock()
	defer fake.createSpaceMutex.Unlock()
	fake.CreateSpaceStub = nil
	fake.createSpaceReturns = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateSpaceReturnsOnCall(i int, result1 cfclient.Space, result2 error) {
	fake.createSpaceMutex.Lock()
	defer fake.createSpaceMutex.Unlock()
	fake.CreateSpaceStub = nil
	if fake.createSpaceReturnsOnCall == nil {
		fake.createSpaceReturnsOnCall = make(map[int]struct {
			result1 cfclient.Space
			result2 error
		})
	}
	fake.createSpaceReturnsOnCall[i] = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateUserProvidedServiceInstance(arg1 cfclient.UserProvidedServiceInstanceRequest) (*cfclient.UserProvidedServiceInstance, error) {
	fake.createUserProvidedServiceInstanceMutex.Lock()
	ret, specificReturn := fake.createUserProvidedServiceInstanceReturnsOnCall[len(fake.createUserProvidedServiceInstanceArgsForCall)]
	fake.createUserProvidedServiceInstanceArgsForCall = append(fake.createUserProvidedServiceInstanceArgsForCall, struct {
		arg1 cfclient.UserProvidedServiceInstanceRequest
	}{arg1})
	stub := fake.CreateUserProvidedServiceInstanceStub
	fakeReturns := fake.createUserProvidedServiceInstanceReturns
	fake.recordInvocation("CreateUserProvidedServiceInstance", []interface{}{arg1})
	fake.createUserProvidedServiceInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) CreateUserProvidedServiceInstanceCallCount() int {
	fake.createUserProvidedServiceInstanceMutex.RLock()
	defer fake.createUserProvidedServiceInstanceMutex.RUnlock()
	return len(fake.createUserProvidedServiceInstanceArgsForCall)
}

func (fake *FakeClient) CreateUserProvidedServiceInstanceCalls(stub func(cfclient.UserProvidedServiceInstanceRequest) (*cfclient.UserProvidedServiceInstance, error)) {
	fake.createUserProvidedServiceInstanceMutex.Lock()
	defer fake.createUserProvidedServiceInstanceMutex.Unlock()
	fake.CreateUserProvidedServiceInstanceStub = stub
}

func (fake *FakeClient) CreateUserProvidedServiceInstanceArgsForCall(i int) cfclient.UserProvidedServiceInstanceRequest {
	fake.createUserProvidedServiceInstanceMutex.RLock()
	defer fake.createUserProvidedServiceInstanceMutex.RUnlock()
	argsForCall := fake.createUserProvidedServiceInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) CreateUserProvidedServiceInstanceReturns(result1 *cfclient.UserProvidedServiceInstance, result2 error) {
	fake.createUserProvidedServiceInstanceMutex.Lock()
	defer fake.createUserProvidedServiceInstanceMutex.Unlock()
	fake.CreateUserProvidedServiceInstanceStub = nil
	fake.createUserProvidedServiceInstanceReturns = struct {
		result1 *cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateUserProvidedServiceInstanceReturnsOnCall(i int, result1 *cfclient.UserProvidedServiceInstance, result2 error) {
	fake.createUserProvidedServiceInstanceMutex.Lock()
	defer fake.createUserProvidedServiceInstanceMutex.Unlock()
	fake.CreateUserProvidedServiceInstanceStub = nil
	if fake.createUserProvidedServiceInstanceReturnsOnCall == nil {
		fake.createUserProvidedServiceInstanceReturnsOnCall = make(map[int]struct {
			result1 *cfclient.UserProvidedServiceInstance
			result2 error
		})
	}
	fake.createUserProvidedServiceInstanceReturnsOnCall[i] = struct {
		result1 *cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) DeleteApp(arg1 string) error {
	fake.deleteAppMutex.Lock()
	ret, specificReturn := fake.deleteAppReturnsOnCall[len(fake.deleteAppArgsForCall)]
	fake.deleteAppArgsForCall = append(fake.deleteAppArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteAppStub
	fakeReturns := fake.deleteAppReturns
	fake.recordInvocation("DeleteApp", []interface{}{arg1})
	fake.deleteAppMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) DeleteAppCallCount() int {
	fake.deleteAppMutex.RLock()
	defer fake.deleteAppMutex.RUnlock()
	return len(fake.deleteAppArgsForCall)
}

func (fake *FakeClient) DeleteAppCalls(stub func(string) error) {
	fake.deleteAppMutex.Lock()
	defer fake.deleteAppMutex.Unlock()
	fake.DeleteAppStub = stub
}

func (fake *FakeClient) DeleteAppArgsForCall(i int) string {
	fake.deleteAppMutex.RLock()
	defer fake.deleteAppMutex.RUnlock()
	argsForCall := fake.deleteAppArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) DeleteAppReturns(result1 error) {
	fake.deleteAppMutex.Lock()
	defer fake.deleteAppMutex.Unlock()
	fake.DeleteAppStub = nil
	fake.deleteAppReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteAppReturnsOnCall(i int, result1 error) {
	fake.deleteAppMutex.Lock()
	defer fake.deleteAppMutex.Unlock()
	fake.DeleteAppStub = nil
	if fake.deleteAppReturnsOnCall == nil {
		fake.deleteAppReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteAppReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteOrg(arg1 string, arg2 bool, arg3 bool) error {
	fake.deleteOrgMutex.Lock()
	ret, specificReturn := fake.deleteOrgReturnsOnCall[len(fake.deleteOrgArgsForCall)]
	fake.deleteOrgArgsForCall = append(fake.deleteOrgArgsForCall, struct {
		arg1 string
		arg2 bool
		arg3 bool
	}{arg1, arg2, arg3})
	stub := fake.DeleteOrgStub
	fakeReturns := fake.deleteOrgReturns
	fake.recordInvocation("DeleteOrg", []interface{}{arg1, arg2, arg3})
	fake.deleteOrgMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) DeleteOrgCallCount() int {
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	return len(fake.deleteOrgArgsForCall)
}

func (fake *FakeClient) DeleteOrgCalls(stub func(string, bool, bool) error) {
	fake.deleteOrgMutex.Lock()
	defer fake.deleteOrgMutex.Unlock()
	fake.DeleteOrgStub = stub
}

func (fake *FakeClient) DeleteOrgArgsForCall(i int) (string, bool, bool) {
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	argsForCall := fake.deleteOrgArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) DeleteOrgReturns(result1 error) {
	fake.deleteOrgMutex.Lock()
	defer fake.deleteOrgMutex.Unlock()
	fake.DeleteOrgStub = nil
	fake.deleteOrgReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteOrgReturnsOnCall(i int, result1 error) {
	fake.deleteOrgMutex.Lock()
	defer fake.deleteOrgMutex.Unlock()
	fake.DeleteOrgStub = nil
	if fake.deleteOrgReturnsOnCall == nil {
		fake.deleteOrgReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteOrgReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteServiceBinding(arg1 string) error {
	fake.deleteServiceBindingMutex.Lock()
	ret, specificReturn := fake.deleteServiceBindingReturnsOnCall[len(fake.deleteServiceBindingArgsForCall)]
	fake.deleteServiceBindingArgsForCall = append(fake.deleteServiceBindingArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteServiceBindingStub
	fakeReturns := fake.deleteServiceBindingReturns
	fake.recordInvocation("DeleteServiceBinding", []interface{}{arg1})
	fake.deleteServiceBindingMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) DeleteServiceBindingCallCount() int {
	fake.deleteServiceBindingMutex.RLock()
	defer fake.deleteServiceBindingMutex.RUnlock()
	return len(fake.deleteServiceBindingArgsForCall)
}

func (fake *FakeClient) DeleteServiceBindingCalls(stub func(string) error) {
	fake.deleteServiceBindingMutex.Lock()
	defer fake.deleteServiceBindingMutex.Unlock()
	fake.DeleteServiceBindingStub = stub
}

func (fake *FakeClient) DeleteServiceBindingArgsForCall(i int) string {
	fake.deleteServiceBindingMutex.RLock()
	defer fake.deleteServiceBindingMutex.RUnlock()
	argsForCall := fake.deleteServiceBindingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) DeleteServiceBindingReturns(result1 error) {
	fake.deleteServiceBindingMutex.Lock()
	defer fake.deleteServiceBindingMutex.Unlock()
	fake.DeleteServiceBindingStub = nil
	fake.deleteServiceBindingReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteServiceBindingReturnsOnCall(i int, result1 error) {
	fake.deleteServiceBindingMutex.Lock()
	defer fake.deleteServiceBindingMutex.Unlock()
	fake.DeleteServiceBindingStub = nil
	if fake.deleteServiceBindingReturnsOnCall == nil {
		fake.deleteServiceBindingReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteServiceBindingReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteServiceInstance(arg1 string, arg2 bool, arg3 bool) error {
	fake.deleteServiceInstanceMutex.Lock()
	ret, specificReturn := fake.deleteServiceInstanceReturnsOnCall[len(fake.deleteServiceInstanceArgsForCall)]
	fake.deleteServiceInstanceArgsForCall = append(fake.deleteServiceInstanceArgsForCall, struct {
		arg1 string
		arg2 bool
		arg3 bool
	}{arg1, arg2, arg3})
	stub := fake.DeleteServiceInstanceStub
	fakeReturns := fake.deleteServiceInstanceReturns
	fake.recordInvocation("DeleteServiceInstance", []interface{}{arg1, arg2, arg3})
	fake.deleteServiceInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) DeleteServiceInstanceCallCount() int {
	fake.deleteServiceInstanceMutex.RLock()
	defer fake.deleteServiceInstanceMutex.RUnlock()
	return len(fake.deleteServiceInstanceArgsForCall)
}

func (fake *FakeClient) DeleteServiceInstanceCalls(stub func(string, bool, bool) error) {
	fake.deleteServiceInstanceMutex.Lock()
	defer fake.deleteServiceInstanceMutex.Unlock()
	fake.DeleteServiceInstanceStub = stub
}

func (fake *FakeClient) DeleteServiceInstanceArgsForCall(i int) (string, bool, bool) {
	fake.deleteServiceInstanceMutex.RLock()
	defer fake.deleteServiceInstanceMutex.RUnlock()
	argsForCall := fake.deleteServiceInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) DeleteServiceInstanceReturns(result1 error) {
	fake.deleteServiceInstanceMutex.Lock()
	defer fake.deleteServiceInstanceMutex.Unlock()
	fake.DeleteServiceInstanceStub = nil
	fake.deleteServiceInstanceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DeleteServiceInstanceReturnsOnCall(i int, result1 error) {
	fake.deleteServiceInstanceMutex.Lock()
	defer fake.deleteServiceInstanceMutex.Unlock()
	fake.DeleteServiceInstanceStub = nil
	if fake.deleteServiceInstanceReturnsOnCall == nil {
		fake.deleteServiceInstanceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteServiceInstanceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DoRequest(arg1 *cfclient.Request) (*http.Response, error) {
	fake.doRequestMutex.Lock()
	ret, specificReturn := fake.doRequestReturnsOnCall[len(fake.doRequestArgsForCall)]
	fake.doRequestArgsForCall = append(fake.doRequestArgsForCall, struct {
		arg1 *cfclient.Request
	}{arg1})
	stub := fake.DoRequestStub
	fakeReturns := fake.doRequestReturns
	fake.recordInvocation("DoRequest", []interface{}{arg1})
	fake.doRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) DoRequestCallCount() int {
	fake.doRequestMutex.RLock()
	defer fake.doRequestMutex.RUnlock()
	return len(fake.doRequestArgsForCall)
}

func (fake *FakeClient) DoRequestCalls(stub func(*cfclient.Request) (*http.Response, error)) {
	fake.doRequestMutex.Lock()
	defer fake.doRequestMutex.Unlock()
	fake.DoRequestStub = stub
}

func (fake *FakeClient) DoRequestArgsForCall(i int) *cfclient.Request {
	fake.doRequestMutex.RLock()
	defer fake.doRequestMutex.RUnlock()
	argsForCall := fake.doRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) DoRequestReturns(result1 *http.Response, result2 error) {
	fake.doRequestMutex.Lock()
	defer fake.doRequestMutex.Unlock()
	fake.DoRequestStub = nil
	fake.doRequestReturns = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) DoRequestReturnsOnCall(i int, result1 *http.Response, result2 error) {
	fake.doRequestMutex.Lock()
	defer fake.doRequestMutex.Unlock()
	fake.DoRequestStub = nil
	if fake.doRequestReturnsOnCall == nil {
		fake.doRequestReturnsOnCall = make(map[int]struct {
			result1 *http.Response
			result2 error
		})
	}
	fake.doRequestReturnsOnCall[i] = struct {
		result1 *http.Response
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) DoWithRetry(arg1 func() error) error {
	fake.doWithRetryMutex.Lock()
	ret, specificReturn := fake.doWithRetryReturnsOnCall[len(fake.doWithRetryArgsForCall)]
	fake.doWithRetryArgsForCall = append(fake.doWithRetryArgsForCall, struct {
		arg1 func() error
	}{arg1})
	stub := fake.DoWithRetryStub
	fakeReturns := fake.doWithRetryReturns
	fake.recordInvocation("DoWithRetry", []interface{}{arg1})
	fake.doWithRetryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) DoWithRetryCallCount() int {
	fake.doWithRetryMutex.RLock()
	defer fake.doWithRetryMutex.RUnlock()
	return len(fake.doWithRetryArgsForCall)
}

func (fake *FakeClient) DoWithRetryCalls(stub func(func() error) error) {
	fake.doWithRetryMutex.Lock()
	defer fake.doWithRetryMutex.Unlock()
	fake.DoWithRetryStub = stub
}

func (fake *FakeClient) DoWithRetryArgsForCall(i int) func() error {
	fake.doWithRetryMutex.RLock()
	defer fake.doWithRetryMutex.RUnlock()
	argsForCall := fake.doWithRetryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) DoWithRetryReturns(result1 error) {
	fake.doWithRetryMutex.Lock()
	defer fake.doWithRetryMutex.Unlock()
	fake.DoWithRetryStub = nil
	fake.doWithRetryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) DoWithRetryReturnsOnCall(i int, result1 error) {
	fake.doWithRetryMutex.Lock()
	defer fake.doWithRetryMutex.Unlock()
	fake.DoWithRetryStub = nil
	if fake.doWithRetryReturnsOnCall == nil {
		fake.doWithRetryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.doWithRetryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) GetAppByGuidNoInlineCall(arg1 string) (cfclient.App, error) {
	fake.getAppByGuidNoInlineCallMutex.Lock()
	ret, specificReturn := fake.getAppByGuidNoInlineCallReturnsOnCall[len(fake.getAppByGuidNoInlineCallArgsForCall)]
	fake.getAppByGuidNoInlineCallArgsForCall = append(fake.getAppByGuidNoInlineCallArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetAppByGuidNoInlineCallStub
	fakeReturns := fake.getAppByGuidNoInlineCallReturns
	fake.recordInvocation("GetAppByGuidNoInlineCall", []interface{}{arg1})
	fake.getAppByGuidNoInlineCallMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetAppByGuidNoInlineCallCallCount() int {
	fake.getAppByGuidNoInlineCallMutex.RLock()
	defer fake.getAppByGuidNoInlineCallMutex.RUnlock()
	return len(fake.getAppByGuidNoInlineCallArgsForCall)
}

func (fake *FakeClient) GetAppByGuidNoInlineCallCalls(stub func(string) (cfclient.App, error)) {
	fake.getAppByGuidNoInlineCallMutex.Lock()
	defer fake.getAppByGuidNoInlineCallMutex.Unlock()
	fake.GetAppByGuidNoInlineCallStub = stub
}

func (fake *FakeClient) GetAppByGuidNoInlineCallArgsForCall(i int) string {
	fake.getAppByGuidNoInlineCallMutex.RLock()
	defer fake.getAppByGuidNoInlineCallMutex.RUnlock()
	argsForCall := fake.getAppByGuidNoInlineCallArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetAppByGuidNoInlineCallReturns(result1 cfclient.App, result2 error) {
	fake.getAppByGuidNoInlineCallMutex.Lock()
	defer fake.getAppByGuidNoInlineCallMutex.Unlock()
	fake.GetAppByGuidNoInlineCallStub = nil
	fake.getAppByGuidNoInlineCallReturns = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetAppByGuidNoInlineCallReturnsOnCall(i int, result1 cfclient.App, result2 error) {
	fake.getAppByGuidNoInlineCallMutex.Lock()
	defer fake.getAppByGuidNoInlineCallMutex.Unlock()
	fake.GetAppByGuidNoInlineCallStub = nil
	if fake.getAppByGuidNoInlineCallReturnsOnCall == nil {
		fake.getAppByGuidNoInlineCallReturnsOnCall = make(map[int]struct {
			result1 cfclient.App
			result2 error
		})
	}
	fake.getAppByGuidNoInlineCallReturnsOnCall[i] = struct {
		result1 cfclient.App
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetClientConfig() *cfclient.Config {
	fake.getClientConfigMutex.Lock()
	ret, specificReturn := fake.getClientConfigReturnsOnCall[len(fake.getClientConfigArgsForCall)]
	fake.getClientConfigArgsForCall = append(fake.getClientConfigArgsForCall, struct {
	}{})
	stub := fake.GetClientConfigStub
	fakeReturns := fake.getClientConfigReturns
	fake.recordInvocation("GetClientConfig", []interface{}{})
	fake.getClientConfigMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) GetClientConfigCallCount() int {
	fake.getClientConfigMutex.RLock()
	defer fake.getClientConfigMutex.RUnlock()
	return len(fake.getClientConfigArgsForCall)
}

func (fake *FakeClient) GetClientConfigCalls(stub func() *cfclient.Config) {
	fake.getClientConfigMutex.Lock()
	defer fake.getClientConfigMutex.Unlock()
	fake.GetClientConfigStub = stub
}

func (fake *FakeClient) GetClientConfigReturns(result1 *cfclient.Config) {
	fake.getClientConfigMutex.Lock()
	defer fake.getClientConfigMutex.Unlock()
	fake.GetClientConfigStub = nil
	fake.getClientConfigReturns = struct {
		result1 *cfclient.Config
	}{result1}
}

func (fake *FakeClient) GetClientConfigReturnsOnCall(i int, result1 *cfclient.Config) {
	fake.getClientConfigMutex.Lock()
	defer fake.getClientConfigMutex.Unlock()
	fake.GetClientConfigStub = nil
	if fake.getClientConfigReturnsOnCall == nil {
		fake.getClientConfigReturnsOnCall = make(map[int]struct {
			result1 *cfclient.Config
		})
	}
	fake.getClientConfigReturnsOnCall[i] = struct {
		result1 *cfclient.Config
	}{result1}
}

func (fake *FakeClient) GetOrgByGuid(arg1 string) (cfclient.Org, error) {
	fake.getOrgByGuidMutex.Lock()
	ret, specificReturn := fake.getOrgByGuidReturnsOnCall[len(fake.getOrgByGuidArgsForCall)]
	fake.getOrgByGuidArgsForCall = append(fake.getOrgByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetOrgByGuidStub
	fakeReturns := fake.getOrgByGuidReturns
	fake.recordInvocation("GetOrgByGuid", []interface{}{arg1})
	fake.getOrgByGuidMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetOrgByGuidCallCount() int {
	fake.getOrgByGuidMutex.RLock()
	defer fake.getOrgByGuidMutex.RUnlock()
	return len(fake.getOrgByGuidArgsForCall)
}

func (fake *FakeClient) GetOrgByGuidCalls(stub func(string) (cfclient.Org, error)) {
	fake.getOrgByGuidMutex.Lock()
	defer fake.getOrgByGuidMutex.Unlock()
	fake.GetOrgByGuidStub = stub
}

func (fake *FakeClient) GetOrgByGuidArgsForCall(i int) string {
	fake.getOrgByGuidMutex.RLock()
	defer fake.getOrgByGuidMutex.RUnlock()
	argsForCall := fake.getOrgByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetOrgByGuidReturns(result1 cfclient.Org, result2 error) {
	fake.getOrgByGuidMutex.Lock()
	defer fake.getOrgByGuidMutex.Unlock()
	fake.GetOrgByGuidStub = nil
	fake.getOrgByGuidReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetOrgByGuidReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.getOrgByGuidMutex.Lock()
	defer fake.getOrgByGuidMutex.Unlock()
	fake.GetOrgByGuidStub = nil
	if fake.getOrgByGuidReturnsOnCall == nil {
		fake.getOrgByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.getOrgByGuidReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetOrgByName(arg1 string) (cfclient.Org, error) {
	fake.getOrgByNameMutex.Lock()
	ret, specificReturn := fake.getOrgByNameReturnsOnCall[len(fake.getOrgByNameArgsForCall)]
	fake.getOrgByNameArgsForCall = append(fake.getOrgByNameArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetOrgByNameStub
	fakeReturns := fake.getOrgByNameReturns
	fake.recordInvocation("GetOrgByName", []interface{}{arg1})
	fake.getOrgByNameMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetOrgByNameCallCount() int {
	fake.getOrgByNameMutex.RLock()
	defer fake.getOrgByNameMutex.RUnlock()
	return len(fake.getOrgByNameArgsForCall)
}

func (fake *FakeClient) GetOrgByNameCalls(stub func(string) (cfclient.Org, error)) {
	fake.getOrgByNameMutex.Lock()
	defer fake.getOrgByNameMutex.Unlock()
	fake.GetOrgByNameStub = stub
}

func (fake *FakeClient) GetOrgByNameArgsForCall(i int) string {
	fake.getOrgByNameMutex.RLock()
	defer fake.getOrgByNameMutex.RUnlock()
	argsForCall := fake.getOrgByNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetOrgByNameReturns(result1 cfclient.Org, result2 error) {
	fake.getOrgByNameMutex.Lock()
	defer fake.getOrgByNameMutex.Unlock()
	fake.GetOrgByNameStub = nil
	fake.getOrgByNameReturns = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetOrgByNameReturnsOnCall(i int, result1 cfclient.Org, result2 error) {
	fake.getOrgByNameMutex.Lock()
	defer fake.getOrgByNameMutex.Unlock()
	fake.GetOrgByNameStub = nil
	if fake.getOrgByNameReturnsOnCall == nil {
		fake.getOrgByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.Org
			result2 error
		})
	}
	fake.getOrgByNameReturnsOnCall[i] = struct {
		result1 cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetServiceByGuid(arg1 string) (cfclient.Service, error) {
	fake.getServiceByGuidMutex.Lock()
	ret, specificReturn := fake.getServiceByGuidReturnsOnCall[len(fake.getServiceByGuidArgsForCall)]
	fake.getServiceByGuidArgsForCall = append(fake.getServiceByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetServiceByGuidStub
	fakeReturns := fake.getServiceByGuidReturns
	fake.recordInvocation("GetServiceByGuid", []interface{}{arg1})
	fake.getServiceByGuidMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetServiceByGuidCallCount() int {
	fake.getServiceByGuidMutex.RLock()
	defer fake.getServiceByGuidMutex.RUnlock()
	return len(fake.getServiceByGuidArgsForCall)
}

func (fake *FakeClient) GetServiceByGuidCalls(stub func(string) (cfclient.Service, error)) {
	fake.getServiceByGuidMutex.Lock()
	defer fake.getServiceByGuidMutex.Unlock()
	fake.GetServiceByGuidStub = stub
}

func (fake *FakeClient) GetServiceByGuidArgsForCall(i int) string {
	fake.getServiceByGuidMutex.RLock()
	defer fake.getServiceByGuidMutex.RUnlock()
	argsForCall := fake.getServiceByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetServiceByGuidReturns(result1 cfclient.Service, result2 error) {
	fake.getServiceByGuidMutex.Lock()
	defer fake.getServiceByGuidMutex.Unlock()
	fake.GetServiceByGuidStub = nil
	fake.getServiceByGuidReturns = struct {
		result1 cfclient.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetServiceByGuidReturnsOnCall(i int, result1 cfclient.Service, result2 error) {
	fake.getServiceByGuidMutex.Lock()
	defer fake.getServiceByGuidMutex.Unlock()
	fake.GetServiceByGuidStub = nil
	if fake.getServiceByGuidReturnsOnCall == nil {
		fake.getServiceByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.Service
			result2 error
		})
	}
	fake.getServiceByGuidReturnsOnCall[i] = struct {
		result1 cfclient.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetServiceInstanceByGuid(arg1 string) (cfclient.ServiceInstance, error) {
	fake.getServiceInstanceByGuidMutex.Lock()
	ret, specificReturn := fake.getServiceInstanceByGuidReturnsOnCall[len(fake.getServiceInstanceByGuidArgsForCall)]
	fake.getServiceInstanceByGuidArgsForCall = append(fake.getServiceInstanceByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetServiceInstanceByGuidStub
	fakeReturns := fake.getServiceInstanceByGuidReturns
	fake.recordInvocation("GetServiceInstanceByGuid", []interface{}{arg1})
	fake.getServiceInstanceByGuidMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetServiceInstanceByGuidCallCount() int {
	fake.getServiceInstanceByGuidMutex.RLock()
	defer fake.getServiceInstanceByGuidMutex.RUnlock()
	return len(fake.getServiceInstanceByGuidArgsForCall)
}

func (fake *FakeClient) GetServiceInstanceByGuidCalls(stub func(string) (cfclient.ServiceInstance, error)) {
	fake.getServiceInstanceByGuidMutex.Lock()
	defer fake.getServiceInstanceByGuidMutex.Unlock()
	fake.GetServiceInstanceByGuidStub = stub
}

func (fake *FakeClient) GetServiceInstanceByGuidArgsForCall(i int) string {
	fake.getServiceInstanceByGuidMutex.RLock()
	defer fake.getServiceInstanceByGuidMutex.RUnlock()
	argsForCall := fake.getServiceInstanceByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetServiceInstanceByGuidReturns(result1 cfclient.ServiceInstance, result2 error) {
	fake.getServiceInstanceByGuidMutex.Lock()
	defer fake.getServiceInstanceByGuidMutex.Unlock()
	fake.GetServiceInstanceByGuidStub = nil
	fake.getServiceInstanceByGuidReturns = struct {
		result1 cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetServiceInstanceByGuidReturnsOnCall(i int, result1 cfclient.ServiceInstance, result2 error) {
	fake.getServiceInstanceByGuidMutex.Lock()
	defer fake.getServiceInstanceByGuidMutex.Unlock()
	fake.GetServiceInstanceByGuidStub = nil
	if fake.getServiceInstanceByGuidReturnsOnCall == nil {
		fake.getServiceInstanceByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.ServiceInstance
			result2 error
		})
	}
	fake.getServiceInstanceByGuidReturnsOnCall[i] = struct {
		result1 cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetServiceInstanceParams(arg1 string) (map[string]interface{}, error) {
	fake.getServiceInstanceParamsMutex.Lock()
	ret, specificReturn := fake.getServiceInstanceParamsReturnsOnCall[len(fake.getServiceInstanceParamsArgsForCall)]
	fake.getServiceInstanceParamsArgsForCall = append(fake.getServiceInstanceParamsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetServiceInstanceParamsStub
	fakeReturns := fake.getServiceInstanceParamsReturns
	fake.recordInvocation("GetServiceInstanceParams", []interface{}{arg1})
	fake.getServiceInstanceParamsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetServiceInstanceParamsCallCount() int {
	fake.getServiceInstanceParamsMutex.RLock()
	defer fake.getServiceInstanceParamsMutex.RUnlock()
	return len(fake.getServiceInstanceParamsArgsForCall)
}

func (fake *FakeClient) GetServiceInstanceParamsCalls(stub func(string) (map[string]interface{}, error)) {
	fake.getServiceInstanceParamsMutex.Lock()
	defer fake.getServiceInstanceParamsMutex.Unlock()
	fake.GetServiceInstanceParamsStub = stub
}

func (fake *FakeClient) GetServiceInstanceParamsArgsForCall(i int) string {
	fake.getServiceInstanceParamsMutex.RLock()
	defer fake.getServiceInstanceParamsMutex.RUnlock()
	argsForCall := fake.getServiceInstanceParamsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetServiceInstanceParamsReturns(result1 map[string]interface{}, result2 error) {
	fake.getServiceInstanceParamsMutex.Lock()
	defer fake.getServiceInstanceParamsMutex.Unlock()
	fake.GetServiceInstanceParamsStub = nil
	fake.getServiceInstanceParamsReturns = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetServiceInstanceParamsReturnsOnCall(i int, result1 map[string]interface{}, result2 error) {
	fake.getServiceInstanceParamsMutex.Lock()
	defer fake.getServiceInstanceParamsMutex.Unlock()
	fake.GetServiceInstanceParamsStub = nil
	if fake.getServiceInstanceParamsReturnsOnCall == nil {
		fake.getServiceInstanceParamsReturnsOnCall = make(map[int]struct {
			result1 map[string]interface{}
			result2 error
		})
	}
	fake.getServiceInstanceParamsReturnsOnCall[i] = struct {
		result1 map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetServicePlanByGUID(arg1 string) (*cfclient.ServicePlan, error) {
	fake.getServicePlanByGUIDMutex.Lock()
	ret, specificReturn := fake.getServicePlanByGUIDReturnsOnCall[len(fake.getServicePlanByGUIDArgsForCall)]
	fake.getServicePlanByGUIDArgsForCall = append(fake.getServicePlanByGUIDArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetServicePlanByGUIDStub
	fakeReturns := fake.getServicePlanByGUIDReturns
	fake.recordInvocation("GetServicePlanByGUID", []interface{}{arg1})
	fake.getServicePlanByGUIDMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetServicePlanByGUIDCallCount() int {
	fake.getServicePlanByGUIDMutex.RLock()
	defer fake.getServicePlanByGUIDMutex.RUnlock()
	return len(fake.getServicePlanByGUIDArgsForCall)
}

func (fake *FakeClient) GetServicePlanByGUIDCalls(stub func(string) (*cfclient.ServicePlan, error)) {
	fake.getServicePlanByGUIDMutex.Lock()
	defer fake.getServicePlanByGUIDMutex.Unlock()
	fake.GetServicePlanByGUIDStub = stub
}

func (fake *FakeClient) GetServicePlanByGUIDArgsForCall(i int) string {
	fake.getServicePlanByGUIDMutex.RLock()
	defer fake.getServicePlanByGUIDMutex.RUnlock()
	argsForCall := fake.getServicePlanByGUIDArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetServicePlanByGUIDReturns(result1 *cfclient.ServicePlan, result2 error) {
	fake.getServicePlanByGUIDMutex.Lock()
	defer fake.getServicePlanByGUIDMutex.Unlock()
	fake.GetServicePlanByGUIDStub = nil
	fake.getServicePlanByGUIDReturns = struct {
		result1 *cfclient.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetServicePlanByGUIDReturnsOnCall(i int, result1 *cfclient.ServicePlan, result2 error) {
	fake.getServicePlanByGUIDMutex.Lock()
	defer fake.getServicePlanByGUIDMutex.Unlock()
	fake.GetServicePlanByGUIDStub = nil
	if fake.getServicePlanByGUIDReturnsOnCall == nil {
		fake.getServicePlanByGUIDReturnsOnCall = make(map[int]struct {
			result1 *cfclient.ServicePlan
			result2 error
		})
	}
	fake.getServicePlanByGUIDReturnsOnCall[i] = struct {
		result1 *cfclient.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetSpaceByGuid(arg1 string) (cfclient.Space, error) {
	fake.getSpaceByGuidMutex.Lock()
	ret, specificReturn := fake.getSpaceByGuidReturnsOnCall[len(fake.getSpaceByGuidArgsForCall)]
	fake.getSpaceByGuidArgsForCall = append(fake.getSpaceByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetSpaceByGuidStub
	fakeReturns := fake.getSpaceByGuidReturns
	fake.recordInvocation("GetSpaceByGuid", []interface{}{arg1})
	fake.getSpaceByGuidMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetSpaceByGuidCallCount() int {
	fake.getSpaceByGuidMutex.RLock()
	defer fake.getSpaceByGuidMutex.RUnlock()
	return len(fake.getSpaceByGuidArgsForCall)
}

func (fake *FakeClient) GetSpaceByGuidCalls(stub func(string) (cfclient.Space, error)) {
	fake.getSpaceByGuidMutex.Lock()
	defer fake.getSpaceByGuidMutex.Unlock()
	fake.GetSpaceByGuidStub = stub
}

func (fake *FakeClient) GetSpaceByGuidArgsForCall(i int) string {
	fake.getSpaceByGuidMutex.RLock()
	defer fake.getSpaceByGuidMutex.RUnlock()
	argsForCall := fake.getSpaceByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetSpaceByGuidReturns(result1 cfclient.Space, result2 error) {
	fake.getSpaceByGuidMutex.Lock()
	defer fake.getSpaceByGuidMutex.Unlock()
	fake.GetSpaceByGuidStub = nil
	fake.getSpaceByGuidReturns = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetSpaceByGuidReturnsOnCall(i int, result1 cfclient.Space, result2 error) {
	fake.getSpaceByGuidMutex.Lock()
	defer fake.getSpaceByGuidMutex.Unlock()
	fake.GetSpaceByGuidStub = nil
	if fake.getSpaceByGuidReturnsOnCall == nil {
		fake.getSpaceByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.Space
			result2 error
		})
	}
	fake.getSpaceByGuidReturnsOnCall[i] = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetSpaceByName(arg1 string, arg2 string) (cfclient.Space, error) {
	fake.getSpaceByNameMutex.Lock()
	ret, specificReturn := fake.getSpaceByNameReturnsOnCall[len(fake.getSpaceByNameArgsForCall)]
	fake.getSpaceByNameArgsForCall = append(fake.getSpaceByNameArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetSpaceByNameStub
	fakeReturns := fake.getSpaceByNameReturns
	fake.recordInvocation("GetSpaceByName", []interface{}{arg1, arg2})
	fake.getSpaceByNameMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetSpaceByNameCallCount() int {
	fake.getSpaceByNameMutex.RLock()
	defer fake.getSpaceByNameMutex.RUnlock()
	return len(fake.getSpaceByNameArgsForCall)
}

func (fake *FakeClient) GetSpaceByNameCalls(stub func(string, string) (cfclient.Space, error)) {
	fake.getSpaceByNameMutex.Lock()
	defer fake.getSpaceByNameMutex.Unlock()
	fake.GetSpaceByNameStub = stub
}

func (fake *FakeClient) GetSpaceByNameArgsForCall(i int) (string, string) {
	fake.getSpaceByNameMutex.RLock()
	defer fake.getSpaceByNameMutex.RUnlock()
	argsForCall := fake.getSpaceByNameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) GetSpaceByNameReturns(result1 cfclient.Space, result2 error) {
	fake.getSpaceByNameMutex.Lock()
	defer fake.getSpaceByNameMutex.Unlock()
	fake.GetSpaceByNameStub = nil
	fake.getSpaceByNameReturns = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetSpaceByNameReturnsOnCall(i int, result1 cfclient.Space, result2 error) {
	fake.getSpaceByNameMutex.Lock()
	defer fake.getSpaceByNameMutex.Unlock()
	fake.GetSpaceByNameStub = nil
	if fake.getSpaceByNameReturnsOnCall == nil {
		fake.getSpaceByNameReturnsOnCall = make(map[int]struct {
			result1 cfclient.Space
			result2 error
		})
	}
	fake.getSpaceByNameReturnsOnCall[i] = struct {
		result1 cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetUserProvidedServiceInstanceByGuid(arg1 string) (cfclient.UserProvidedServiceInstance, error) {
	fake.getUserProvidedServiceInstanceByGuidMutex.Lock()
	ret, specificReturn := fake.getUserProvidedServiceInstanceByGuidReturnsOnCall[len(fake.getUserProvidedServiceInstanceByGuidArgsForCall)]
	fake.getUserProvidedServiceInstanceByGuidArgsForCall = append(fake.getUserProvidedServiceInstanceByGuidArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetUserProvidedServiceInstanceByGuidStub
	fakeReturns := fake.getUserProvidedServiceInstanceByGuidReturns
	fake.recordInvocation("GetUserProvidedServiceInstanceByGuid", []interface{}{arg1})
	fake.getUserProvidedServiceInstanceByGuidMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetUserProvidedServiceInstanceByGuidCallCount() int {
	fake.getUserProvidedServiceInstanceByGuidMutex.RLock()
	defer fake.getUserProvidedServiceInstanceByGuidMutex.RUnlock()
	return len(fake.getUserProvidedServiceInstanceByGuidArgsForCall)
}

func (fake *FakeClient) GetUserProvidedServiceInstanceByGuidCalls(stub func(string) (cfclient.UserProvidedServiceInstance, error)) {
	fake.getUserProvidedServiceInstanceByGuidMutex.Lock()
	defer fake.getUserProvidedServiceInstanceByGuidMutex.Unlock()
	fake.GetUserProvidedServiceInstanceByGuidStub = stub
}

func (fake *FakeClient) GetUserProvidedServiceInstanceByGuidArgsForCall(i int) string {
	fake.getUserProvidedServiceInstanceByGuidMutex.RLock()
	defer fake.getUserProvidedServiceInstanceByGuidMutex.RUnlock()
	argsForCall := fake.getUserProvidedServiceInstanceByGuidArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetUserProvidedServiceInstanceByGuidReturns(result1 cfclient.UserProvidedServiceInstance, result2 error) {
	fake.getUserProvidedServiceInstanceByGuidMutex.Lock()
	defer fake.getUserProvidedServiceInstanceByGuidMutex.Unlock()
	fake.GetUserProvidedServiceInstanceByGuidStub = nil
	fake.getUserProvidedServiceInstanceByGuidReturns = struct {
		result1 cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetUserProvidedServiceInstanceByGuidReturnsOnCall(i int, result1 cfclient.UserProvidedServiceInstance, result2 error) {
	fake.getUserProvidedServiceInstanceByGuidMutex.Lock()
	defer fake.getUserProvidedServiceInstanceByGuidMutex.Unlock()
	fake.GetUserProvidedServiceInstanceByGuidStub = nil
	if fake.getUserProvidedServiceInstanceByGuidReturnsOnCall == nil {
		fake.getUserProvidedServiceInstanceByGuidReturnsOnCall = make(map[int]struct {
			result1 cfclient.UserProvidedServiceInstance
			result2 error
		})
	}
	fake.getUserProvidedServiceInstanceByGuidReturnsOnCall[i] = struct {
		result1 cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListOrgs() ([]cfclient.Org, error) {
	fake.listOrgsMutex.Lock()
	ret, specificReturn := fake.listOrgsReturnsOnCall[len(fake.listOrgsArgsForCall)]
	fake.listOrgsArgsForCall = append(fake.listOrgsArgsForCall, struct {
	}{})
	stub := fake.ListOrgsStub
	fakeReturns := fake.listOrgsReturns
	fake.recordInvocation("ListOrgs", []interface{}{})
	fake.listOrgsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListOrgsCallCount() int {
	fake.listOrgsMutex.RLock()
	defer fake.listOrgsMutex.RUnlock()
	return len(fake.listOrgsArgsForCall)
}

func (fake *FakeClient) ListOrgsCalls(stub func() ([]cfclient.Org, error)) {
	fake.listOrgsMutex.Lock()
	defer fake.listOrgsMutex.Unlock()
	fake.ListOrgsStub = stub
}

func (fake *FakeClient) ListOrgsReturns(result1 []cfclient.Org, result2 error) {
	fake.listOrgsMutex.Lock()
	defer fake.listOrgsMutex.Unlock()
	fake.ListOrgsStub = nil
	fake.listOrgsReturns = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListOrgsReturnsOnCall(i int, result1 []cfclient.Org, result2 error) {
	fake.listOrgsMutex.Lock()
	defer fake.listOrgsMutex.Unlock()
	fake.ListOrgsStub = nil
	if fake.listOrgsReturnsOnCall == nil {
		fake.listOrgsReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Org
			result2 error
		})
	}
	fake.listOrgsReturnsOnCall[i] = struct {
		result1 []cfclient.Org
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServiceBindingsByQuery(arg1 url.Values) ([]cfclient.ServiceBinding, error) {
	fake.listServiceBindingsByQueryMutex.Lock()
	ret, specificReturn := fake.listServiceBindingsByQueryReturnsOnCall[len(fake.listServiceBindingsByQueryArgsForCall)]
	fake.listServiceBindingsByQueryArgsForCall = append(fake.listServiceBindingsByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	stub := fake.ListServiceBindingsByQueryStub
	fakeReturns := fake.listServiceBindingsByQueryReturns
	fake.recordInvocation("ListServiceBindingsByQuery", []interface{}{arg1})
	fake.listServiceBindingsByQueryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListServiceBindingsByQueryCallCount() int {
	fake.listServiceBindingsByQueryMutex.RLock()
	defer fake.listServiceBindingsByQueryMutex.RUnlock()
	return len(fake.listServiceBindingsByQueryArgsForCall)
}

func (fake *FakeClient) ListServiceBindingsByQueryCalls(stub func(url.Values) ([]cfclient.ServiceBinding, error)) {
	fake.listServiceBindingsByQueryMutex.Lock()
	defer fake.listServiceBindingsByQueryMutex.Unlock()
	fake.ListServiceBindingsByQueryStub = stub
}

func (fake *FakeClient) ListServiceBindingsByQueryArgsForCall(i int) url.Values {
	fake.listServiceBindingsByQueryMutex.RLock()
	defer fake.listServiceBindingsByQueryMutex.RUnlock()
	argsForCall := fake.listServiceBindingsByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListServiceBindingsByQueryReturns(result1 []cfclient.ServiceBinding, result2 error) {
	fake.listServiceBindingsByQueryMutex.Lock()
	defer fake.listServiceBindingsByQueryMutex.Unlock()
	fake.ListServiceBindingsByQueryStub = nil
	fake.listServiceBindingsByQueryReturns = struct {
		result1 []cfclient.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServiceBindingsByQueryReturnsOnCall(i int, result1 []cfclient.ServiceBinding, result2 error) {
	fake.listServiceBindingsByQueryMutex.Lock()
	defer fake.listServiceBindingsByQueryMutex.Unlock()
	fake.ListServiceBindingsByQueryStub = nil
	if fake.listServiceBindingsByQueryReturnsOnCall == nil {
		fake.listServiceBindingsByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceBinding
			result2 error
		})
	}
	fake.listServiceBindingsByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceBinding
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServiceBrokers() ([]cfclient.ServiceBroker, error) {
	fake.listServiceBrokersMutex.Lock()
	ret, specificReturn := fake.listServiceBrokersReturnsOnCall[len(fake.listServiceBrokersArgsForCall)]
	fake.listServiceBrokersArgsForCall = append(fake.listServiceBrokersArgsForCall, struct {
	}{})
	stub := fake.ListServiceBrokersStub
	fakeReturns := fake.listServiceBrokersReturns
	fake.recordInvocation("ListServiceBrokers", []interface{}{})
	fake.listServiceBrokersMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListServiceBrokersCallCount() int {
	fake.listServiceBrokersMutex.RLock()
	defer fake.listServiceBrokersMutex.RUnlock()
	return len(fake.listServiceBrokersArgsForCall)
}

func (fake *FakeClient) ListServiceBrokersCalls(stub func() ([]cfclient.ServiceBroker, error)) {
	fake.listServiceBrokersMutex.Lock()
	defer fake.listServiceBrokersMutex.Unlock()
	fake.ListServiceBrokersStub = stub
}

func (fake *FakeClient) ListServiceBrokersReturns(result1 []cfclient.ServiceBroker, result2 error) {
	fake.listServiceBrokersMutex.Lock()
	defer fake.listServiceBrokersMutex.Unlock()
	fake.ListServiceBrokersStub = nil
	fake.listServiceBrokersReturns = struct {
		result1 []cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServiceBrokersReturnsOnCall(i int, result1 []cfclient.ServiceBroker, result2 error) {
	fake.listServiceBrokersMutex.Lock()
	defer fake.listServiceBrokersMutex.Unlock()
	fake.ListServiceBrokersStub = nil
	if fake.listServiceBrokersReturnsOnCall == nil {
		fake.listServiceBrokersReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceBroker
			result2 error
		})
	}
	fake.listServiceBrokersReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceBroker
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServiceInstancesByQuery(arg1 url.Values) ([]cfclient.ServiceInstance, error) {
	fake.listServiceInstancesByQueryMutex.Lock()
	ret, specificReturn := fake.listServiceInstancesByQueryReturnsOnCall[len(fake.listServiceInstancesByQueryArgsForCall)]
	fake.listServiceInstancesByQueryArgsForCall = append(fake.listServiceInstancesByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	stub := fake.ListServiceInstancesByQueryStub
	fakeReturns := fake.listServiceInstancesByQueryReturns
	fake.recordInvocation("ListServiceInstancesByQuery", []interface{}{arg1})
	fake.listServiceInstancesByQueryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListServiceInstancesByQueryCallCount() int {
	fake.listServiceInstancesByQueryMutex.RLock()
	defer fake.listServiceInstancesByQueryMutex.RUnlock()
	return len(fake.listServiceInstancesByQueryArgsForCall)
}

func (fake *FakeClient) ListServiceInstancesByQueryCalls(stub func(url.Values) ([]cfclient.ServiceInstance, error)) {
	fake.listServiceInstancesByQueryMutex.Lock()
	defer fake.listServiceInstancesByQueryMutex.Unlock()
	fake.ListServiceInstancesByQueryStub = stub
}

func (fake *FakeClient) ListServiceInstancesByQueryArgsForCall(i int) url.Values {
	fake.listServiceInstancesByQueryMutex.RLock()
	defer fake.listServiceInstancesByQueryMutex.RUnlock()
	argsForCall := fake.listServiceInstancesByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListServiceInstancesByQueryReturns(result1 []cfclient.ServiceInstance, result2 error) {
	fake.listServiceInstancesByQueryMutex.Lock()
	defer fake.listServiceInstancesByQueryMutex.Unlock()
	fake.ListServiceInstancesByQueryStub = nil
	fake.listServiceInstancesByQueryReturns = struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServiceInstancesByQueryReturnsOnCall(i int, result1 []cfclient.ServiceInstance, result2 error) {
	fake.listServiceInstancesByQueryMutex.Lock()
	defer fake.listServiceInstancesByQueryMutex.Unlock()
	fake.ListServiceInstancesByQueryStub = nil
	if fake.listServiceInstancesByQueryReturnsOnCall == nil {
		fake.listServiceInstancesByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceInstance
			result2 error
		})
	}
	fake.listServiceInstancesByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServiceKeysByQuery(arg1 url.Values) ([]cfclient.ServiceKey, error) {
	fake.listServiceKeysByQueryMutex.Lock()
	ret, specificReturn := fake.listServiceKeysByQueryReturnsOnCall[len(fake.listServiceKeysByQueryArgsForCall)]
	fake.listServiceKeysByQueryArgsForCall = append(fake.listServiceKeysByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	stub := fake.ListServiceKeysByQueryStub
	fakeReturns := fake.listServiceKeysByQueryReturns
	fake.recordInvocation("ListServiceKeysByQuery", []interface{}{arg1})
	fake.listServiceKeysByQueryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListServiceKeysByQueryCallCount() int {
	fake.listServiceKeysByQueryMutex.RLock()
	defer fake.listServiceKeysByQueryMutex.RUnlock()
	return len(fake.listServiceKeysByQueryArgsForCall)
}

func (fake *FakeClient) ListServiceKeysByQueryCalls(stub func(url.Values) ([]cfclient.ServiceKey, error)) {
	fake.listServiceKeysByQueryMutex.Lock()
	defer fake.listServiceKeysByQueryMutex.Unlock()
	fake.ListServiceKeysByQueryStub = stub
}

func (fake *FakeClient) ListServiceKeysByQueryArgsForCall(i int) url.Values {
	fake.listServiceKeysByQueryMutex.RLock()
	defer fake.listServiceKeysByQueryMutex.RUnlock()
	argsForCall := fake.listServiceKeysByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListServiceKeysByQueryReturns(result1 []cfclient.ServiceKey, result2 error) {
	fake.listServiceKeysByQueryMutex.Lock()
	defer fake.listServiceKeysByQueryMutex.Unlock()
	fake.ListServiceKeysByQueryStub = nil
	fake.listServiceKeysByQueryReturns = struct {
		result1 []cfclient.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServiceKeysByQueryReturnsOnCall(i int, result1 []cfclient.ServiceKey, result2 error) {
	fake.listServiceKeysByQueryMutex.Lock()
	defer fake.listServiceKeysByQueryMutex.Unlock()
	fake.ListServiceKeysByQueryStub = nil
	if fake.listServiceKeysByQueryReturnsOnCall == nil {
		fake.listServiceKeysByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceKey
			result2 error
		})
	}
	fake.listServiceKeysByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceKey
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServicePlans() ([]cfclient.ServicePlan, error) {
	fake.listServicePlansMutex.Lock()
	ret, specificReturn := fake.listServicePlansReturnsOnCall[len(fake.listServicePlansArgsForCall)]
	fake.listServicePlansArgsForCall = append(fake.listServicePlansArgsForCall, struct {
	}{})
	stub := fake.ListServicePlansStub
	fakeReturns := fake.listServicePlansReturns
	fake.recordInvocation("ListServicePlans", []interface{}{})
	fake.listServicePlansMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListServicePlansCallCount() int {
	fake.listServicePlansMutex.RLock()
	defer fake.listServicePlansMutex.RUnlock()
	return len(fake.listServicePlansArgsForCall)
}

func (fake *FakeClient) ListServicePlansCalls(stub func() ([]cfclient.ServicePlan, error)) {
	fake.listServicePlansMutex.Lock()
	defer fake.listServicePlansMutex.Unlock()
	fake.ListServicePlansStub = stub
}

func (fake *FakeClient) ListServicePlansReturns(result1 []cfclient.ServicePlan, result2 error) {
	fake.listServicePlansMutex.Lock()
	defer fake.listServicePlansMutex.Unlock()
	fake.ListServicePlansStub = nil
	fake.listServicePlansReturns = struct {
		result1 []cfclient.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServicePlansReturnsOnCall(i int, result1 []cfclient.ServicePlan, result2 error) {
	fake.listServicePlansMutex.Lock()
	defer fake.listServicePlansMutex.Unlock()
	fake.ListServicePlansStub = nil
	if fake.listServicePlansReturnsOnCall == nil {
		fake.listServicePlansReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServicePlan
			result2 error
		})
	}
	fake.listServicePlansReturnsOnCall[i] = struct {
		result1 []cfclient.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServicePlansByQuery(arg1 url.Values) ([]cfclient.ServicePlan, error) {
	fake.listServicePlansByQueryMutex.Lock()
	ret, specificReturn := fake.listServicePlansByQueryReturnsOnCall[len(fake.listServicePlansByQueryArgsForCall)]
	fake.listServicePlansByQueryArgsForCall = append(fake.listServicePlansByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	stub := fake.ListServicePlansByQueryStub
	fakeReturns := fake.listServicePlansByQueryReturns
	fake.recordInvocation("ListServicePlansByQuery", []interface{}{arg1})
	fake.listServicePlansByQueryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListServicePlansByQueryCallCount() int {
	fake.listServicePlansByQueryMutex.RLock()
	defer fake.listServicePlansByQueryMutex.RUnlock()
	return len(fake.listServicePlansByQueryArgsForCall)
}

func (fake *FakeClient) ListServicePlansByQueryCalls(stub func(url.Values) ([]cfclient.ServicePlan, error)) {
	fake.listServicePlansByQueryMutex.Lock()
	defer fake.listServicePlansByQueryMutex.Unlock()
	fake.ListServicePlansByQueryStub = stub
}

func (fake *FakeClient) ListServicePlansByQueryArgsForCall(i int) url.Values {
	fake.listServicePlansByQueryMutex.RLock()
	defer fake.listServicePlansByQueryMutex.RUnlock()
	argsForCall := fake.listServicePlansByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListServicePlansByQueryReturns(result1 []cfclient.ServicePlan, result2 error) {
	fake.listServicePlansByQueryMutex.Lock()
	defer fake.listServicePlansByQueryMutex.Unlock()
	fake.ListServicePlansByQueryStub = nil
	fake.listServicePlansByQueryReturns = struct {
		result1 []cfclient.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServicePlansByQueryReturnsOnCall(i int, result1 []cfclient.ServicePlan, result2 error) {
	fake.listServicePlansByQueryMutex.Lock()
	defer fake.listServicePlansByQueryMutex.Unlock()
	fake.ListServicePlansByQueryStub = nil
	if fake.listServicePlansByQueryReturnsOnCall == nil {
		fake.listServicePlansByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServicePlan
			result2 error
		})
	}
	fake.listServicePlansByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.ServicePlan
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServices() ([]cfclient.Service, error) {
	fake.listServicesMutex.Lock()
	ret, specificReturn := fake.listServicesReturnsOnCall[len(fake.listServicesArgsForCall)]
	fake.listServicesArgsForCall = append(fake.listServicesArgsForCall, struct {
	}{})
	stub := fake.ListServicesStub
	fakeReturns := fake.listServicesReturns
	fake.recordInvocation("ListServices", []interface{}{})
	fake.listServicesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListServicesCallCount() int {
	fake.listServicesMutex.RLock()
	defer fake.listServicesMutex.RUnlock()
	return len(fake.listServicesArgsForCall)
}

func (fake *FakeClient) ListServicesCalls(stub func() ([]cfclient.Service, error)) {
	fake.listServicesMutex.Lock()
	defer fake.listServicesMutex.Unlock()
	fake.ListServicesStub = stub
}

func (fake *FakeClient) ListServicesReturns(result1 []cfclient.Service, result2 error) {
	fake.listServicesMutex.Lock()
	defer fake.listServicesMutex.Unlock()
	fake.ListServicesStub = nil
	fake.listServicesReturns = struct {
		result1 []cfclient.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListServicesReturnsOnCall(i int, result1 []cfclient.Service, result2 error) {
	fake.listServicesMutex.Lock()
	defer fake.listServicesMutex.Unlock()
	fake.ListServicesStub = nil
	if fake.listServicesReturnsOnCall == nil {
		fake.listServicesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Service
			result2 error
		})
	}
	fake.listServicesReturnsOnCall[i] = struct {
		result1 []cfclient.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListSpaceServiceInstances(arg1 string) ([]cfclient.ServiceInstance, error) {
	fake.listSpaceServiceInstancesMutex.Lock()
	ret, specificReturn := fake.listSpaceServiceInstancesReturnsOnCall[len(fake.listSpaceServiceInstancesArgsForCall)]
	fake.listSpaceServiceInstancesArgsForCall = append(fake.listSpaceServiceInstancesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ListSpaceServiceInstancesStub
	fakeReturns := fake.listSpaceServiceInstancesReturns
	fake.recordInvocation("ListSpaceServiceInstances", []interface{}{arg1})
	fake.listSpaceServiceInstancesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListSpaceServiceInstancesCallCount() int {
	fake.listSpaceServiceInstancesMutex.RLock()
	defer fake.listSpaceServiceInstancesMutex.RUnlock()
	return len(fake.listSpaceServiceInstancesArgsForCall)
}

func (fake *FakeClient) ListSpaceServiceInstancesCalls(stub func(string) ([]cfclient.ServiceInstance, error)) {
	fake.listSpaceServiceInstancesMutex.Lock()
	defer fake.listSpaceServiceInstancesMutex.Unlock()
	fake.ListSpaceServiceInstancesStub = stub
}

func (fake *FakeClient) ListSpaceServiceInstancesArgsForCall(i int) string {
	fake.listSpaceServiceInstancesMutex.RLock()
	defer fake.listSpaceServiceInstancesMutex.RUnlock()
	argsForCall := fake.listSpaceServiceInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListSpaceServiceInstancesReturns(result1 []cfclient.ServiceInstance, result2 error) {
	fake.listSpaceServiceInstancesMutex.Lock()
	defer fake.listSpaceServiceInstancesMutex.Unlock()
	fake.ListSpaceServiceInstancesStub = nil
	fake.listSpaceServiceInstancesReturns = struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListSpaceServiceInstancesReturnsOnCall(i int, result1 []cfclient.ServiceInstance, result2 error) {
	fake.listSpaceServiceInstancesMutex.Lock()
	defer fake.listSpaceServiceInstancesMutex.Unlock()
	fake.ListSpaceServiceInstancesStub = nil
	if fake.listSpaceServiceInstancesReturnsOnCall == nil {
		fake.listSpaceServiceInstancesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.ServiceInstance
			result2 error
		})
	}
	fake.listSpaceServiceInstancesReturnsOnCall[i] = struct {
		result1 []cfclient.ServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListSpaces() ([]cfclient.Space, error) {
	fake.listSpacesMutex.Lock()
	ret, specificReturn := fake.listSpacesReturnsOnCall[len(fake.listSpacesArgsForCall)]
	fake.listSpacesArgsForCall = append(fake.listSpacesArgsForCall, struct {
	}{})
	stub := fake.ListSpacesStub
	fakeReturns := fake.listSpacesReturns
	fake.recordInvocation("ListSpaces", []interface{}{})
	fake.listSpacesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListSpacesCallCount() int {
	fake.listSpacesMutex.RLock()
	defer fake.listSpacesMutex.RUnlock()
	return len(fake.listSpacesArgsForCall)
}

func (fake *FakeClient) ListSpacesCalls(stub func() ([]cfclient.Space, error)) {
	fake.listSpacesMutex.Lock()
	defer fake.listSpacesMutex.Unlock()
	fake.ListSpacesStub = stub
}

func (fake *FakeClient) ListSpacesReturns(result1 []cfclient.Space, result2 error) {
	fake.listSpacesMutex.Lock()
	defer fake.listSpacesMutex.Unlock()
	fake.ListSpacesStub = nil
	fake.listSpacesReturns = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListSpacesReturnsOnCall(i int, result1 []cfclient.Space, result2 error) {
	fake.listSpacesMutex.Lock()
	defer fake.listSpacesMutex.Unlock()
	fake.ListSpacesStub = nil
	if fake.listSpacesReturnsOnCall == nil {
		fake.listSpacesReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Space
			result2 error
		})
	}
	fake.listSpacesReturnsOnCall[i] = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListSpacesByQuery(arg1 url.Values) ([]cfclient.Space, error) {
	fake.listSpacesByQueryMutex.Lock()
	ret, specificReturn := fake.listSpacesByQueryReturnsOnCall[len(fake.listSpacesByQueryArgsForCall)]
	fake.listSpacesByQueryArgsForCall = append(fake.listSpacesByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	stub := fake.ListSpacesByQueryStub
	fakeReturns := fake.listSpacesByQueryReturns
	fake.recordInvocation("ListSpacesByQuery", []interface{}{arg1})
	fake.listSpacesByQueryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListSpacesByQueryCallCount() int {
	fake.listSpacesByQueryMutex.RLock()
	defer fake.listSpacesByQueryMutex.RUnlock()
	return len(fake.listSpacesByQueryArgsForCall)
}

func (fake *FakeClient) ListSpacesByQueryCalls(stub func(url.Values) ([]cfclient.Space, error)) {
	fake.listSpacesByQueryMutex.Lock()
	defer fake.listSpacesByQueryMutex.Unlock()
	fake.ListSpacesByQueryStub = stub
}

func (fake *FakeClient) ListSpacesByQueryArgsForCall(i int) url.Values {
	fake.listSpacesByQueryMutex.RLock()
	defer fake.listSpacesByQueryMutex.RUnlock()
	argsForCall := fake.listSpacesByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListSpacesByQueryReturns(result1 []cfclient.Space, result2 error) {
	fake.listSpacesByQueryMutex.Lock()
	defer fake.listSpacesByQueryMutex.Unlock()
	fake.ListSpacesByQueryStub = nil
	fake.listSpacesByQueryReturns = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListSpacesByQueryReturnsOnCall(i int, result1 []cfclient.Space, result2 error) {
	fake.listSpacesByQueryMutex.Lock()
	defer fake.listSpacesByQueryMutex.Unlock()
	fake.ListSpacesByQueryStub = nil
	if fake.listSpacesByQueryReturnsOnCall == nil {
		fake.listSpacesByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.Space
			result2 error
		})
	}
	fake.listSpacesByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.Space
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListUserProvidedServiceInstancesByQuery(arg1 url.Values) ([]cfclient.UserProvidedServiceInstance, error) {
	fake.listUserProvidedServiceInstancesByQueryMutex.Lock()
	ret, specificReturn := fake.listUserProvidedServiceInstancesByQueryReturnsOnCall[len(fake.listUserProvidedServiceInstancesByQueryArgsForCall)]
	fake.listUserProvidedServiceInstancesByQueryArgsForCall = append(fake.listUserProvidedServiceInstancesByQueryArgsForCall, struct {
		arg1 url.Values
	}{arg1})
	stub := fake.ListUserProvidedServiceInstancesByQueryStub
	fakeReturns := fake.listUserProvidedServiceInstancesByQueryReturns
	fake.recordInvocation("ListUserProvidedServiceInstancesByQuery", []interface{}{arg1})
	fake.listUserProvidedServiceInstancesByQueryMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) ListUserProvidedServiceInstancesByQueryCallCount() int {
	fake.listUserProvidedServiceInstancesByQueryMutex.RLock()
	defer fake.listUserProvidedServiceInstancesByQueryMutex.RUnlock()
	return len(fake.listUserProvidedServiceInstancesByQueryArgsForCall)
}

func (fake *FakeClient) ListUserProvidedServiceInstancesByQueryCalls(stub func(url.Values) ([]cfclient.UserProvidedServiceInstance, error)) {
	fake.listUserProvidedServiceInstancesByQueryMutex.Lock()
	defer fake.listUserProvidedServiceInstancesByQueryMutex.Unlock()
	fake.ListUserProvidedServiceInstancesByQueryStub = stub
}

func (fake *FakeClient) ListUserProvidedServiceInstancesByQueryArgsForCall(i int) url.Values {
	fake.listUserProvidedServiceInstancesByQueryMutex.RLock()
	defer fake.listUserProvidedServiceInstancesByQueryMutex.RUnlock()
	argsForCall := fake.listUserProvidedServiceInstancesByQueryArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) ListUserProvidedServiceInstancesByQueryReturns(result1 []cfclient.UserProvidedServiceInstance, result2 error) {
	fake.listUserProvidedServiceInstancesByQueryMutex.Lock()
	defer fake.listUserProvidedServiceInstancesByQueryMutex.Unlock()
	fake.ListUserProvidedServiceInstancesByQueryStub = nil
	fake.listUserProvidedServiceInstancesByQueryReturns = struct {
		result1 []cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) ListUserProvidedServiceInstancesByQueryReturnsOnCall(i int, result1 []cfclient.UserProvidedServiceInstance, result2 error) {
	fake.listUserProvidedServiceInstancesByQueryMutex.Lock()
	defer fake.listUserProvidedServiceInstancesByQueryMutex.Unlock()
	fake.ListUserProvidedServiceInstancesByQueryStub = nil
	if fake.listUserProvidedServiceInstancesByQueryReturnsOnCall == nil {
		fake.listUserProvidedServiceInstancesByQueryReturnsOnCall = make(map[int]struct {
			result1 []cfclient.UserProvidedServiceInstance
			result2 error
		})
	}
	fake.listUserProvidedServiceInstancesByQueryReturnsOnCall[i] = struct {
		result1 []cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) NewRequest(arg1 string, arg2 string) *cfclient.Request {
	fake.newRequestMutex.Lock()
	ret, specificReturn := fake.newRequestReturnsOnCall[len(fake.newRequestArgsForCall)]
	fake.newRequestArgsForCall = append(fake.newRequestArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.NewRequestStub
	fakeReturns := fake.newRequestReturns
	fake.recordInvocation("NewRequest", []interface{}{arg1, arg2})
	fake.newRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) NewRequestCallCount() int {
	fake.newRequestMutex.RLock()
	defer fake.newRequestMutex.RUnlock()
	return len(fake.newRequestArgsForCall)
}

func (fake *FakeClient) NewRequestCalls(stub func(string, string) *cfclient.Request) {
	fake.newRequestMutex.Lock()
	defer fake.newRequestMutex.Unlock()
	fake.NewRequestStub = stub
}

func (fake *FakeClient) NewRequestArgsForCall(i int) (string, string) {
	fake.newRequestMutex.RLock()
	defer fake.newRequestMutex.RUnlock()
	argsForCall := fake.newRequestArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) NewRequestReturns(result1 *cfclient.Request) {
	fake.newRequestMutex.Lock()
	defer fake.newRequestMutex.Unlock()
	fake.NewRequestStub = nil
	fake.newRequestReturns = struct {
		result1 *cfclient.Request
	}{result1}
}

func (fake *FakeClient) NewRequestReturnsOnCall(i int, result1 *cfclient.Request) {
	fake.newRequestMutex.Lock()
	defer fake.newRequestMutex.Unlock()
	fake.NewRequestStub = nil
	if fake.newRequestReturnsOnCall == nil {
		fake.newRequestReturnsOnCall = make(map[int]struct {
			result1 *cfclient.Request
		})
	}
	fake.newRequestReturnsOnCall[i] = struct {
		result1 *cfclient.Request
	}{result1}
}

func (fake *FakeClient) UpdateSI(arg1 string, arg2 cfclient.ServiceInstanceUpdateRequest, arg3 bool) error {
	fake.updateSIMutex.Lock()
	ret, specificReturn := fake.updateSIReturnsOnCall[len(fake.updateSIArgsForCall)]
	fake.updateSIArgsForCall = append(fake.updateSIArgsForCall, struct {
		arg1 string
		arg2 cfclient.ServiceInstanceUpdateRequest
		arg3 bool
	}{arg1, arg2, arg3})
	stub := fake.UpdateSIStub
	fakeReturns := fake.updateSIReturns
	fake.recordInvocation("UpdateSI", []interface{}{arg1, arg2, arg3})
	fake.updateSIMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClient) UpdateSICallCount() int {
	fake.updateSIMutex.RLock()
	defer fake.updateSIMutex.RUnlock()
	return len(fake.updateSIArgsForCall)
}

func (fake *FakeClient) UpdateSICalls(stub func(string, cfclient.ServiceInstanceUpdateRequest, bool) error) {
	fake.updateSIMutex.Lock()
	defer fake.updateSIMutex.Unlock()
	fake.UpdateSIStub = stub
}

func (fake *FakeClient) UpdateSIArgsForCall(i int) (string, cfclient.ServiceInstanceUpdateRequest, bool) {
	fake.updateSIMutex.RLock()
	defer fake.updateSIMutex.RUnlock()
	argsForCall := fake.updateSIArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) UpdateSIReturns(result1 error) {
	fake.updateSIMutex.Lock()
	defer fake.updateSIMutex.Unlock()
	fake.UpdateSIStub = nil
	fake.updateSIReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) UpdateSIReturnsOnCall(i int, result1 error) {
	fake.updateSIMutex.Lock()
	defer fake.updateSIMutex.Unlock()
	fake.UpdateSIStub = nil
	if fake.updateSIReturnsOnCall == nil {
		fake.updateSIReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateSIReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) UpdateUserProvidedServiceInstance(arg1 string, arg2 cfclient.UserProvidedServiceInstanceRequest) (*cfclient.UserProvidedServiceInstance, error) {
	fake.updateUserProvidedServiceInstanceMutex.Lock()
	ret, specificReturn := fake.updateUserProvidedServiceInstanceReturnsOnCall[len(fake.updateUserProvidedServiceInstanceArgsForCall)]
	fake.updateUserProvidedServiceInstanceArgsForCall = append(fake.updateUserProvidedServiceInstanceArgsForCall, struct {
		arg1 string
		arg2 cfclient.UserProvidedServiceInstanceRequest
	}{arg1, arg2})
	stub := fake.UpdateUserProvidedServiceInstanceStub
	fakeReturns := fake.updateUserProvidedServiceInstanceReturns
	fake.recordInvocation("UpdateUserProvidedServiceInstance", []interface{}{arg1, arg2})
	fake.updateUserProvidedServiceInstanceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) UpdateUserProvidedServiceInstanceCallCount() int {
	fake.updateUserProvidedServiceInstanceMutex.RLock()
	defer fake.updateUserProvidedServiceInstanceMutex.RUnlock()
	return len(fake.updateUserProvidedServiceInstanceArgsForCall)
}

func (fake *FakeClient) UpdateUserProvidedServiceInstanceCalls(stub func(string, cfclient.UserProvidedServiceInstanceRequest) (*cfclient.UserProvidedServiceInstance, error)) {
	fake.updateUserProvidedServiceInstanceMutex.Lock()
	defer fake.updateUserProvidedServiceInstanceMutex.Unlock()
	fake.UpdateUserProvidedServiceInstanceStub = stub
}

func (fake *FakeClient) UpdateUserProvidedServiceInstanceArgsForCall(i int) (string, cfclient.UserProvidedServiceInstanceRequest) {
	fake.updateUserProvidedServiceInstanceMutex.RLock()
	defer fake.updateUserProvidedServiceInstanceMutex.RUnlock()
	argsForCall := fake.updateUserProvidedServiceInstanceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) UpdateUserProvidedServiceInstanceReturns(result1 *cfclient.UserProvidedServiceInstance, result2 error) {
	fake.updateUserProvidedServiceInstanceMutex.Lock()
	defer fake.updateUserProvidedServiceInstanceMutex.Unlock()
	fake.UpdateUserProvidedServiceInstanceStub = nil
	fake.updateUserProvidedServiceInstanceReturns = struct {
		result1 *cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) UpdateUserProvidedServiceInstanceReturnsOnCall(i int, result1 *cfclient.UserProvidedServiceInstance, result2 error) {
	fake.updateUserProvidedServiceInstanceMutex.Lock()
	defer fake.updateUserProvidedServiceInstanceMutex.Unlock()
	fake.UpdateUserProvidedServiceInstanceStub = nil
	if fake.updateUserProvidedServiceInstanceReturnsOnCall == nil {
		fake.updateUserProvidedServiceInstanceReturnsOnCall = make(map[int]struct {
			result1 *cfclient.UserProvidedServiceInstance
			result2 error
		})
	}
	fake.updateUserProvidedServiceInstanceReturnsOnCall[i] = struct {
		result1 *cfclient.UserProvidedServiceInstance
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.appByNameMutex.RLock()
	defer fake.appByNameMutex.RUnlock()
	fake.createAppMutex.RLock()
	defer fake.createAppMutex.RUnlock()
	fake.createOrgMutex.RLock()
	defer fake.createOrgMutex.RUnlock()
	fake.createServiceBindingMutex.RLock()
	defer fake.createServiceBindingMutex.RUnlock()
	fake.createServiceInstanceMutex.RLock()
	defer fake.createServiceInstanceMutex.RUnlock()
	fake.createServiceKeyMutex.RLock()
	defer fake.createServiceKeyMutex.RUnlock()
	fake.createSpaceMutex.RLock()
	defer fake.createSpaceMutex.RUnlock()
	fake.createUserProvidedServiceInstanceMutex.RLock()
	defer fake.createUserProvidedServiceInstanceMutex.RUnlock()
	fake.deleteAppMutex.RLock()
	defer fake.deleteAppMutex.RUnlock()
	fake.deleteOrgMutex.RLock()
	defer fake.deleteOrgMutex.RUnlock()
	fake.deleteServiceBindingMutex.RLock()
	defer fake.deleteServiceBindingMutex.RUnlock()
	fake.deleteServiceInstanceMutex.RLock()
	defer fake.deleteServiceInstanceMutex.RUnlock()
	fake.doRequestMutex.RLock()
	defer fake.doRequestMutex.RUnlock()
	fake.doWithRetryMutex.RLock()
	defer fake.doWithRetryMutex.RUnlock()
	fake.getAppByGuidNoInlineCallMutex.RLock()
	defer fake.getAppByGuidNoInlineCallMutex.RUnlock()
	fake.getClientConfigMutex.RLock()
	defer fake.getClientConfigMutex.RUnlock()
	fake.getOrgByGuidMutex.RLock()
	defer fake.getOrgByGuidMutex.RUnlock()
	fake.getOrgByNameMutex.RLock()
	defer fake.getOrgByNameMutex.RUnlock()
	fake.getServiceByGuidMutex.RLock()
	defer fake.getServiceByGuidMutex.RUnlock()
	fake.getServiceInstanceByGuidMutex.RLock()
	defer fake.getServiceInstanceByGuidMutex.RUnlock()
	fake.getServiceInstanceParamsMutex.RLock()
	defer fake.getServiceInstanceParamsMutex.RUnlock()
	fake.getServicePlanByGUIDMutex.RLock()
	defer fake.getServicePlanByGUIDMutex.RUnlock()
	fake.getSpaceByGuidMutex.RLock()
	defer fake.getSpaceByGuidMutex.RUnlock()
	fake.getSpaceByNameMutex.RLock()
	defer fake.getSpaceByNameMutex.RUnlock()
	fake.getUserProvidedServiceInstanceByGuidMutex.RLock()
	defer fake.getUserProvidedServiceInstanceByGuidMutex.RUnlock()
	fake.listOrgsMutex.RLock()
	defer fake.listOrgsMutex.RUnlock()
	fake.listServiceBindingsByQueryMutex.RLock()
	defer fake.listServiceBindingsByQueryMutex.RUnlock()
	fake.listServiceBrokersMutex.RLock()
	defer fake.listServiceBrokersMutex.RUnlock()
	fake.listServiceInstancesByQueryMutex.RLock()
	defer fake.listServiceInstancesByQueryMutex.RUnlock()
	fake.listServiceKeysByQueryMutex.RLock()
	defer fake.listServiceKeysByQueryMutex.RUnlock()
	fake.listServicePlansMutex.RLock()
	defer fake.listServicePlansMutex.RUnlock()
	fake.listServicePlansByQueryMutex.RLock()
	defer fake.listServicePlansByQueryMutex.RUnlock()
	fake.listServicesMutex.RLock()
	defer fake.listServicesMutex.RUnlock()
	fake.listSpaceServiceInstancesMutex.RLock()
	defer fake.listSpaceServiceInstancesMutex.RUnlock()
	fake.listSpacesMutex.RLock()
	defer fake.listSpacesMutex.RUnlock()
	fake.listSpacesByQueryMutex.RLock()
	defer fake.listSpacesByQueryMutex.RUnlock()
	fake.listUserProvidedServiceInstancesByQueryMutex.RLock()
	defer fake.listUserProvidedServiceInstancesByQueryMutex.RUnlock()
	fake.newRequestMutex.RLock()
	defer fake.newRequestMutex.RUnlock()
	fake.updateSIMutex.RLock()
	defer fake.updateSIMutex.RUnlock()
	fake.updateUserProvidedServiceInstanceMutex.RLock()
	defer fake.updateUserProvidedServiceInstanceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cf.Client = new(FakeClient)
