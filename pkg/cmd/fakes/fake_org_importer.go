// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/vmware-tanzu/service-instance-migrator-for-cloud-foundry/pkg/cmd"
	"github.com/vmware-tanzu/service-instance-migrator-for-cloud-foundry/pkg/config"
)

type FakeOrgImporter struct {
	ImportStub        func(context.Context, config.OpsManager, string, ...string) error
	importMutex       sync.RWMutex
	importArgsForCall []struct {
		arg1 context.Context
		arg2 config.OpsManager
		arg3 string
		arg4 []string
	}
	importReturns struct {
		result1 error
	}
	importReturnsOnCall map[int]struct {
		result1 error
	}
	ImportAllStub        func(context.Context, config.OpsManager, string) error
	importAllMutex       sync.RWMutex
	importAllArgsForCall []struct {
		arg1 context.Context
		arg2 config.OpsManager
		arg3 string
	}
	importAllReturns struct {
		result1 error
	}
	importAllReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOrgImporter) Import(arg1 context.Context, arg2 config.OpsManager, arg3 string, arg4 ...string) error {
	fake.importMutex.Lock()
	ret, specificReturn := fake.importReturnsOnCall[len(fake.importArgsForCall)]
	fake.importArgsForCall = append(fake.importArgsForCall, struct {
		arg1 context.Context
		arg2 config.OpsManager
		arg3 string
		arg4 []string
	}{arg1, arg2, arg3, arg4})
	stub := fake.ImportStub
	fakeReturns := fake.importReturns
	fake.recordInvocation("Import", []interface{}{arg1, arg2, arg3, arg4})
	fake.importMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOrgImporter) ImportCallCount() int {
	fake.importMutex.RLock()
	defer fake.importMutex.RUnlock()
	return len(fake.importArgsForCall)
}

func (fake *FakeOrgImporter) ImportCalls(stub func(context.Context, config.OpsManager, string, ...string) error) {
	fake.importMutex.Lock()
	defer fake.importMutex.Unlock()
	fake.ImportStub = stub
}

func (fake *FakeOrgImporter) ImportArgsForCall(i int) (context.Context, config.OpsManager, string, []string) {
	fake.importMutex.RLock()
	defer fake.importMutex.RUnlock()
	argsForCall := fake.importArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeOrgImporter) ImportReturns(result1 error) {
	fake.importMutex.Lock()
	defer fake.importMutex.Unlock()
	fake.ImportStub = nil
	fake.importReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOrgImporter) ImportReturnsOnCall(i int, result1 error) {
	fake.importMutex.Lock()
	defer fake.importMutex.Unlock()
	fake.ImportStub = nil
	if fake.importReturnsOnCall == nil {
		fake.importReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.importReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOrgImporter) ImportAll(arg1 context.Context, arg2 config.OpsManager, arg3 string) error {
	fake.importAllMutex.Lock()
	ret, specificReturn := fake.importAllReturnsOnCall[len(fake.importAllArgsForCall)]
	fake.importAllArgsForCall = append(fake.importAllArgsForCall, struct {
		arg1 context.Context
		arg2 config.OpsManager
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.ImportAllStub
	fakeReturns := fake.importAllReturns
	fake.recordInvocation("ImportAll", []interface{}{arg1, arg2, arg3})
	fake.importAllMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOrgImporter) ImportAllCallCount() int {
	fake.importAllMutex.RLock()
	defer fake.importAllMutex.RUnlock()
	return len(fake.importAllArgsForCall)
}

func (fake *FakeOrgImporter) ImportAllCalls(stub func(context.Context, config.OpsManager, string) error) {
	fake.importAllMutex.Lock()
	defer fake.importAllMutex.Unlock()
	fake.ImportAllStub = stub
}

func (fake *FakeOrgImporter) ImportAllArgsForCall(i int) (context.Context, config.OpsManager, string) {
	fake.importAllMutex.RLock()
	defer fake.importAllMutex.RUnlock()
	argsForCall := fake.importAllArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeOrgImporter) ImportAllReturns(result1 error) {
	fake.importAllMutex.Lock()
	defer fake.importAllMutex.Unlock()
	fake.ImportAllStub = nil
	fake.importAllReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOrgImporter) ImportAllReturnsOnCall(i int, result1 error) {
	fake.importAllMutex.Lock()
	defer fake.importAllMutex.Unlock()
	fake.ImportAllStub = nil
	if fake.importAllReturnsOnCall == nil {
		fake.importAllReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.importAllReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOrgImporter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.importMutex.RLock()
	defer fake.importMutex.RUnlock()
	fake.importAllMutex.RLock()
	defer fake.importAllMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOrgImporter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cmd.OrgImporter = new(FakeOrgImporter)
