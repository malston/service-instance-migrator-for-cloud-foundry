/* 
 *  Copyright 2022 VMware, Inc.
 *  
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vmware-tanzu/service-instance-migrator-for-cloud-foundry/pkg/cmd"
	"github.com/vmware-tanzu/service-instance-migrator-for-cloud-foundry/pkg/migrate"
)

type FakeImporterFactory struct {
	NewOrgImporterStub        func(migrate.ServiceInstanceImporter) cmd.OrgImporter
	newOrgImporterMutex       sync.RWMutex
	newOrgImporterArgsForCall []struct {
		arg1 migrate.ServiceInstanceImporter
	}
	newOrgImporterReturns struct {
		result1 cmd.OrgImporter
	}
	newOrgImporterReturnsOnCall map[int]struct {
		result1 cmd.OrgImporter
	}
	NewSpaceImporterStub        func(migrate.ServiceInstanceImporter) cmd.SpaceImporter
	newSpaceImporterMutex       sync.RWMutex
	newSpaceImporterArgsForCall []struct {
		arg1 migrate.ServiceInstanceImporter
	}
	newSpaceImporterReturns struct {
		result1 cmd.SpaceImporter
	}
	newSpaceImporterReturnsOnCall map[int]struct {
		result1 cmd.SpaceImporter
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeImporterFactory) NewOrgImporter(arg1 migrate.ServiceInstanceImporter) cmd.OrgImporter {
	fake.newOrgImporterMutex.Lock()
	ret, specificReturn := fake.newOrgImporterReturnsOnCall[len(fake.newOrgImporterArgsForCall)]
	fake.newOrgImporterArgsForCall = append(fake.newOrgImporterArgsForCall, struct {
		arg1 migrate.ServiceInstanceImporter
	}{arg1})
	stub := fake.NewOrgImporterStub
	fakeReturns := fake.newOrgImporterReturns
	fake.recordInvocation("NewOrgImporter", []interface{}{arg1})
	fake.newOrgImporterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImporterFactory) NewOrgImporterCallCount() int {
	fake.newOrgImporterMutex.RLock()
	defer fake.newOrgImporterMutex.RUnlock()
	return len(fake.newOrgImporterArgsForCall)
}

func (fake *FakeImporterFactory) NewOrgImporterCalls(stub func(migrate.ServiceInstanceImporter) cmd.OrgImporter) {
	fake.newOrgImporterMutex.Lock()
	defer fake.newOrgImporterMutex.Unlock()
	fake.NewOrgImporterStub = stub
}

func (fake *FakeImporterFactory) NewOrgImporterArgsForCall(i int) migrate.ServiceInstanceImporter {
	fake.newOrgImporterMutex.RLock()
	defer fake.newOrgImporterMutex.RUnlock()
	argsForCall := fake.newOrgImporterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImporterFactory) NewOrgImporterReturns(result1 cmd.OrgImporter) {
	fake.newOrgImporterMutex.Lock()
	defer fake.newOrgImporterMutex.Unlock()
	fake.NewOrgImporterStub = nil
	fake.newOrgImporterReturns = struct {
		result1 cmd.OrgImporter
	}{result1}
}

func (fake *FakeImporterFactory) NewOrgImporterReturnsOnCall(i int, result1 cmd.OrgImporter) {
	fake.newOrgImporterMutex.Lock()
	defer fake.newOrgImporterMutex.Unlock()
	fake.NewOrgImporterStub = nil
	if fake.newOrgImporterReturnsOnCall == nil {
		fake.newOrgImporterReturnsOnCall = make(map[int]struct {
			result1 cmd.OrgImporter
		})
	}
	fake.newOrgImporterReturnsOnCall[i] = struct {
		result1 cmd.OrgImporter
	}{result1}
}

func (fake *FakeImporterFactory) NewSpaceImporter(arg1 migrate.ServiceInstanceImporter) cmd.SpaceImporter {
	fake.newSpaceImporterMutex.Lock()
	ret, specificReturn := fake.newSpaceImporterReturnsOnCall[len(fake.newSpaceImporterArgsForCall)]
	fake.newSpaceImporterArgsForCall = append(fake.newSpaceImporterArgsForCall, struct {
		arg1 migrate.ServiceInstanceImporter
	}{arg1})
	stub := fake.NewSpaceImporterStub
	fakeReturns := fake.newSpaceImporterReturns
	fake.recordInvocation("NewSpaceImporter", []interface{}{arg1})
	fake.newSpaceImporterMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeImporterFactory) NewSpaceImporterCallCount() int {
	fake.newSpaceImporterMutex.RLock()
	defer fake.newSpaceImporterMutex.RUnlock()
	return len(fake.newSpaceImporterArgsForCall)
}

func (fake *FakeImporterFactory) NewSpaceImporterCalls(stub func(migrate.ServiceInstanceImporter) cmd.SpaceImporter) {
	fake.newSpaceImporterMutex.Lock()
	defer fake.newSpaceImporterMutex.Unlock()
	fake.NewSpaceImporterStub = stub
}

func (fake *FakeImporterFactory) NewSpaceImporterArgsForCall(i int) migrate.ServiceInstanceImporter {
	fake.newSpaceImporterMutex.RLock()
	defer fake.newSpaceImporterMutex.RUnlock()
	argsForCall := fake.newSpaceImporterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeImporterFactory) NewSpaceImporterReturns(result1 cmd.SpaceImporter) {
	fake.newSpaceImporterMutex.Lock()
	defer fake.newSpaceImporterMutex.Unlock()
	fake.NewSpaceImporterStub = nil
	fake.newSpaceImporterReturns = struct {
		result1 cmd.SpaceImporter
	}{result1}
}

func (fake *FakeImporterFactory) NewSpaceImporterReturnsOnCall(i int, result1 cmd.SpaceImporter) {
	fake.newSpaceImporterMutex.Lock()
	defer fake.newSpaceImporterMutex.Unlock()
	fake.NewSpaceImporterStub = nil
	if fake.newSpaceImporterReturnsOnCall == nil {
		fake.newSpaceImporterReturnsOnCall = make(map[int]struct {
			result1 cmd.SpaceImporter
		})
	}
	fake.newSpaceImporterReturnsOnCall[i] = struct {
		result1 cmd.SpaceImporter
	}{result1}
}

func (fake *FakeImporterFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newOrgImporterMutex.RLock()
	defer fake.newOrgImporterMutex.RUnlock()
	fake.newSpaceImporterMutex.RLock()
	defer fake.newSpaceImporterMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeImporterFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cmd.ImporterFactory = new(FakeImporterFactory)
