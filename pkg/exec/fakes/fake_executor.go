/* 
 *  Copyright 2022 VMware, Inc.
 *  
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"io"
	"sync"

	"github.com/vmware-tanzu/service-instance-migrator-for-cloud-foundry/pkg/exec"
)

type FakeExecutor struct {
	ExecuteStub        func(context.Context, io.Reader) (exec.Result, error)
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		arg1 context.Context
		arg2 io.Reader
	}
	executeReturns struct {
		result1 exec.Result
		result2 error
	}
	executeReturnsOnCall map[int]struct {
		result1 exec.Result
		result2 error
	}
	LastResultStub        func() exec.Result
	lastResultMutex       sync.RWMutex
	lastResultArgsForCall []struct {
	}
	lastResultReturns struct {
		result1 exec.Result
	}
	lastResultReturnsOnCall map[int]struct {
		result1 exec.Result
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeExecutor) Execute(arg1 context.Context, arg2 io.Reader) (exec.Result, error) {
	fake.executeMutex.Lock()
	ret, specificReturn := fake.executeReturnsOnCall[len(fake.executeArgsForCall)]
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		arg1 context.Context
		arg2 io.Reader
	}{arg1, arg2})
	stub := fake.ExecuteStub
	fakeReturns := fake.executeReturns
	fake.recordInvocation("Execute", []interface{}{arg1, arg2})
	fake.executeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeExecutor) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *FakeExecutor) ExecuteCalls(stub func(context.Context, io.Reader) (exec.Result, error)) {
	fake.executeMutex.Lock()
	defer fake.executeMutex.Unlock()
	fake.ExecuteStub = stub
}

func (fake *FakeExecutor) ExecuteArgsForCall(i int) (context.Context, io.Reader) {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	argsForCall := fake.executeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeExecutor) ExecuteReturns(result1 exec.Result, result2 error) {
	fake.executeMutex.Lock()
	defer fake.executeMutex.Unlock()
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 exec.Result
		result2 error
	}{result1, result2}
}

func (fake *FakeExecutor) ExecuteReturnsOnCall(i int, result1 exec.Result, result2 error) {
	fake.executeMutex.Lock()
	defer fake.executeMutex.Unlock()
	fake.ExecuteStub = nil
	if fake.executeReturnsOnCall == nil {
		fake.executeReturnsOnCall = make(map[int]struct {
			result1 exec.Result
			result2 error
		})
	}
	fake.executeReturnsOnCall[i] = struct {
		result1 exec.Result
		result2 error
	}{result1, result2}
}

func (fake *FakeExecutor) LastResult() exec.Result {
	fake.lastResultMutex.Lock()
	ret, specificReturn := fake.lastResultReturnsOnCall[len(fake.lastResultArgsForCall)]
	fake.lastResultArgsForCall = append(fake.lastResultArgsForCall, struct {
	}{})
	stub := fake.LastResultStub
	fakeReturns := fake.lastResultReturns
	fake.recordInvocation("LastResult", []interface{}{})
	fake.lastResultMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeExecutor) LastResultCallCount() int {
	fake.lastResultMutex.RLock()
	defer fake.lastResultMutex.RUnlock()
	return len(fake.lastResultArgsForCall)
}

func (fake *FakeExecutor) LastResultCalls(stub func() exec.Result) {
	fake.lastResultMutex.Lock()
	defer fake.lastResultMutex.Unlock()
	fake.LastResultStub = stub
}

func (fake *FakeExecutor) LastResultReturns(result1 exec.Result) {
	fake.lastResultMutex.Lock()
	defer fake.lastResultMutex.Unlock()
	fake.LastResultStub = nil
	fake.lastResultReturns = struct {
		result1 exec.Result
	}{result1}
}

func (fake *FakeExecutor) LastResultReturnsOnCall(i int, result1 exec.Result) {
	fake.lastResultMutex.Lock()
	defer fake.lastResultMutex.Unlock()
	fake.LastResultStub = nil
	if fake.lastResultReturnsOnCall == nil {
		fake.lastResultReturnsOnCall = make(map[int]struct {
			result1 exec.Result
		})
	}
	fake.lastResultReturnsOnCall[i] = struct {
		result1 exec.Result
	}{result1}
}

func (fake *FakeExecutor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	fake.lastResultMutex.RLock()
	defer fake.lastResultMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeExecutor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ exec.Executor = new(FakeExecutor)
