/* 
 *  Copyright 2022 VMware, Inc.
 *  
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/vmware-tanzu/service-instance-migrator-for-cloud-foundry/pkg/config"
	"github.com/vmware-tanzu/service-instance-migrator-for-cloud-foundry/pkg/migrate"
)

type FakeServiceInstanceExporter struct {
	ExportManagedServicesStub        func(context.Context, cfclient.Org, cfclient.Space, config.OpsManager, string) error
	exportManagedServicesMutex       sync.RWMutex
	exportManagedServicesArgsForCall []struct {
		arg1 context.Context
		arg2 cfclient.Org
		arg3 cfclient.Space
		arg4 config.OpsManager
		arg5 string
	}
	exportManagedServicesReturns struct {
		result1 error
	}
	exportManagedServicesReturnsOnCall map[int]struct {
		result1 error
	}
	ExportUserProvidedServicesStub        func(context.Context, cfclient.Org, cfclient.Space, string) error
	exportUserProvidedServicesMutex       sync.RWMutex
	exportUserProvidedServicesArgsForCall []struct {
		arg1 context.Context
		arg2 cfclient.Org
		arg3 cfclient.Space
		arg4 string
	}
	exportUserProvidedServicesReturns struct {
		result1 error
	}
	exportUserProvidedServicesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceInstanceExporter) ExportManagedServices(arg1 context.Context, arg2 cfclient.Org, arg3 cfclient.Space, arg4 config.OpsManager, arg5 string) error {
	fake.exportManagedServicesMutex.Lock()
	ret, specificReturn := fake.exportManagedServicesReturnsOnCall[len(fake.exportManagedServicesArgsForCall)]
	fake.exportManagedServicesArgsForCall = append(fake.exportManagedServicesArgsForCall, struct {
		arg1 context.Context
		arg2 cfclient.Org
		arg3 cfclient.Space
		arg4 config.OpsManager
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.ExportManagedServicesStub
	fakeReturns := fake.exportManagedServicesReturns
	fake.recordInvocation("ExportManagedServices", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.exportManagedServicesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceInstanceExporter) ExportManagedServicesCallCount() int {
	fake.exportManagedServicesMutex.RLock()
	defer fake.exportManagedServicesMutex.RUnlock()
	return len(fake.exportManagedServicesArgsForCall)
}

func (fake *FakeServiceInstanceExporter) ExportManagedServicesCalls(stub func(context.Context, cfclient.Org, cfclient.Space, config.OpsManager, string) error) {
	fake.exportManagedServicesMutex.Lock()
	defer fake.exportManagedServicesMutex.Unlock()
	fake.ExportManagedServicesStub = stub
}

func (fake *FakeServiceInstanceExporter) ExportManagedServicesArgsForCall(i int) (context.Context, cfclient.Org, cfclient.Space, config.OpsManager, string) {
	fake.exportManagedServicesMutex.RLock()
	defer fake.exportManagedServicesMutex.RUnlock()
	argsForCall := fake.exportManagedServicesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeServiceInstanceExporter) ExportManagedServicesReturns(result1 error) {
	fake.exportManagedServicesMutex.Lock()
	defer fake.exportManagedServicesMutex.Unlock()
	fake.ExportManagedServicesStub = nil
	fake.exportManagedServicesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceInstanceExporter) ExportManagedServicesReturnsOnCall(i int, result1 error) {
	fake.exportManagedServicesMutex.Lock()
	defer fake.exportManagedServicesMutex.Unlock()
	fake.ExportManagedServicesStub = nil
	if fake.exportManagedServicesReturnsOnCall == nil {
		fake.exportManagedServicesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.exportManagedServicesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceInstanceExporter) ExportUserProvidedServices(arg1 context.Context, arg2 cfclient.Org, arg3 cfclient.Space, arg4 string) error {
	fake.exportUserProvidedServicesMutex.Lock()
	ret, specificReturn := fake.exportUserProvidedServicesReturnsOnCall[len(fake.exportUserProvidedServicesArgsForCall)]
	fake.exportUserProvidedServicesArgsForCall = append(fake.exportUserProvidedServicesArgsForCall, struct {
		arg1 context.Context
		arg2 cfclient.Org
		arg3 cfclient.Space
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.ExportUserProvidedServicesStub
	fakeReturns := fake.exportUserProvidedServicesReturns
	fake.recordInvocation("ExportUserProvidedServices", []interface{}{arg1, arg2, arg3, arg4})
	fake.exportUserProvidedServicesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceInstanceExporter) ExportUserProvidedServicesCallCount() int {
	fake.exportUserProvidedServicesMutex.RLock()
	defer fake.exportUserProvidedServicesMutex.RUnlock()
	return len(fake.exportUserProvidedServicesArgsForCall)
}

func (fake *FakeServiceInstanceExporter) ExportUserProvidedServicesCalls(stub func(context.Context, cfclient.Org, cfclient.Space, string) error) {
	fake.exportUserProvidedServicesMutex.Lock()
	defer fake.exportUserProvidedServicesMutex.Unlock()
	fake.ExportUserProvidedServicesStub = stub
}

func (fake *FakeServiceInstanceExporter) ExportUserProvidedServicesArgsForCall(i int) (context.Context, cfclient.Org, cfclient.Space, string) {
	fake.exportUserProvidedServicesMutex.RLock()
	defer fake.exportUserProvidedServicesMutex.RUnlock()
	argsForCall := fake.exportUserProvidedServicesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeServiceInstanceExporter) ExportUserProvidedServicesReturns(result1 error) {
	fake.exportUserProvidedServicesMutex.Lock()
	defer fake.exportUserProvidedServicesMutex.Unlock()
	fake.ExportUserProvidedServicesStub = nil
	fake.exportUserProvidedServicesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceInstanceExporter) ExportUserProvidedServicesReturnsOnCall(i int, result1 error) {
	fake.exportUserProvidedServicesMutex.Lock()
	defer fake.exportUserProvidedServicesMutex.Unlock()
	fake.ExportUserProvidedServicesStub = nil
	if fake.exportUserProvidedServicesReturnsOnCall == nil {
		fake.exportUserProvidedServicesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.exportUserProvidedServicesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceInstanceExporter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.exportManagedServicesMutex.RLock()
	defer fake.exportManagedServicesMutex.RUnlock()
	fake.exportUserProvidedServicesMutex.RLock()
	defer fake.exportUserProvidedServicesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceInstanceExporter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ migrate.ServiceInstanceExporter = new(FakeServiceInstanceExporter)
