/* 
 *  Copyright 2022 VMware, Inc.
 *  
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/vmware-tanzu/service-instance-migrator-for-cloud-foundry/pkg/cf"
	"github.com/vmware-tanzu/service-instance-migrator-for-cloud-foundry/pkg/config"
	"github.com/vmware-tanzu/service-instance-migrator-for-cloud-foundry/pkg/migrate"
)

type FakeServiceInstanceImporter struct {
	ImportManagedServiceStub        func(context.Context, string, string, *cf.ServiceInstance, config.OpsManager, string) error
	importManagedServiceMutex       sync.RWMutex
	importManagedServiceArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *cf.ServiceInstance
		arg5 config.OpsManager
		arg6 string
	}
	importManagedServiceReturns struct {
		result1 error
	}
	importManagedServiceReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeServiceInstanceImporter) ImportManagedService(arg1 context.Context, arg2 string, arg3 string, arg4 *cf.ServiceInstance, arg5 config.OpsManager, arg6 string) error {
	fake.importManagedServiceMutex.Lock()
	ret, specificReturn := fake.importManagedServiceReturnsOnCall[len(fake.importManagedServiceArgsForCall)]
	fake.importManagedServiceArgsForCall = append(fake.importManagedServiceArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
		arg4 *cf.ServiceInstance
		arg5 config.OpsManager
		arg6 string
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	stub := fake.ImportManagedServiceStub
	fakeReturns := fake.importManagedServiceReturns
	fake.recordInvocation("ImportManagedService", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.importManagedServiceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeServiceInstanceImporter) ImportManagedServiceCallCount() int {
	fake.importManagedServiceMutex.RLock()
	defer fake.importManagedServiceMutex.RUnlock()
	return len(fake.importManagedServiceArgsForCall)
}

func (fake *FakeServiceInstanceImporter) ImportManagedServiceCalls(stub func(context.Context, string, string, *cf.ServiceInstance, config.OpsManager, string) error) {
	fake.importManagedServiceMutex.Lock()
	defer fake.importManagedServiceMutex.Unlock()
	fake.ImportManagedServiceStub = stub
}

func (fake *FakeServiceInstanceImporter) ImportManagedServiceArgsForCall(i int) (context.Context, string, string, *cf.ServiceInstance, config.OpsManager, string) {
	fake.importManagedServiceMutex.RLock()
	defer fake.importManagedServiceMutex.RUnlock()
	argsForCall := fake.importManagedServiceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *FakeServiceInstanceImporter) ImportManagedServiceReturns(result1 error) {
	fake.importManagedServiceMutex.Lock()
	defer fake.importManagedServiceMutex.Unlock()
	fake.ImportManagedServiceStub = nil
	fake.importManagedServiceReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceInstanceImporter) ImportManagedServiceReturnsOnCall(i int, result1 error) {
	fake.importManagedServiceMutex.Lock()
	defer fake.importManagedServiceMutex.Unlock()
	fake.ImportManagedServiceStub = nil
	if fake.importManagedServiceReturnsOnCall == nil {
		fake.importManagedServiceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.importManagedServiceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeServiceInstanceImporter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.importManagedServiceMutex.RLock()
	defer fake.importManagedServiceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeServiceInstanceImporter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ migrate.ServiceInstanceImporter = new(FakeServiceInstanceImporter)
