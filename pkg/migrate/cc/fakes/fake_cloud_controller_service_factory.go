// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vmware-tanzu/service-instance-migrator-for-cloud-foundry/pkg/migrate/cc"
)

type FakeCloudControllerServiceFactory struct {
	NewCloudControllerServiceStub        func(*cc.Config, bool) (cc.Service, error)
	newCloudControllerServiceMutex       sync.RWMutex
	newCloudControllerServiceArgsForCall []struct {
		arg1 *cc.Config
		arg2 bool
	}
	newCloudControllerServiceReturns struct {
		result1 cc.Service
		result2 error
	}
	newCloudControllerServiceReturnsOnCall map[int]struct {
		result1 cc.Service
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCloudControllerServiceFactory) NewCloudControllerService(arg1 *cc.Config, arg2 bool) (cc.Service, error) {
	fake.newCloudControllerServiceMutex.Lock()
	ret, specificReturn := fake.newCloudControllerServiceReturnsOnCall[len(fake.newCloudControllerServiceArgsForCall)]
	fake.newCloudControllerServiceArgsForCall = append(fake.newCloudControllerServiceArgsForCall, struct {
		arg1 *cc.Config
		arg2 bool
	}{arg1, arg2})
	stub := fake.NewCloudControllerServiceStub
	fakeReturns := fake.newCloudControllerServiceReturns
	fake.recordInvocation("NewCloudControllerService", []interface{}{arg1, arg2})
	fake.newCloudControllerServiceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCloudControllerServiceFactory) NewCloudControllerServiceCallCount() int {
	fake.newCloudControllerServiceMutex.RLock()
	defer fake.newCloudControllerServiceMutex.RUnlock()
	return len(fake.newCloudControllerServiceArgsForCall)
}

func (fake *FakeCloudControllerServiceFactory) NewCloudControllerServiceCalls(stub func(*cc.Config, bool) (cc.Service, error)) {
	fake.newCloudControllerServiceMutex.Lock()
	defer fake.newCloudControllerServiceMutex.Unlock()
	fake.NewCloudControllerServiceStub = stub
}

func (fake *FakeCloudControllerServiceFactory) NewCloudControllerServiceArgsForCall(i int) (*cc.Config, bool) {
	fake.newCloudControllerServiceMutex.RLock()
	defer fake.newCloudControllerServiceMutex.RUnlock()
	argsForCall := fake.newCloudControllerServiceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCloudControllerServiceFactory) NewCloudControllerServiceReturns(result1 cc.Service, result2 error) {
	fake.newCloudControllerServiceMutex.Lock()
	defer fake.newCloudControllerServiceMutex.Unlock()
	fake.NewCloudControllerServiceStub = nil
	fake.newCloudControllerServiceReturns = struct {
		result1 cc.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudControllerServiceFactory) NewCloudControllerServiceReturnsOnCall(i int, result1 cc.Service, result2 error) {
	fake.newCloudControllerServiceMutex.Lock()
	defer fake.newCloudControllerServiceMutex.Unlock()
	fake.NewCloudControllerServiceStub = nil
	if fake.newCloudControllerServiceReturnsOnCall == nil {
		fake.newCloudControllerServiceReturnsOnCall = make(map[int]struct {
			result1 cc.Service
			result2 error
		})
	}
	fake.newCloudControllerServiceReturnsOnCall[i] = struct {
		result1 cc.Service
		result2 error
	}{result1, result2}
}

func (fake *FakeCloudControllerServiceFactory) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.newCloudControllerServiceMutex.RLock()
	defer fake.newCloudControllerServiceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCloudControllerServiceFactory) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cc.CloudControllerServiceFactory = new(FakeCloudControllerServiceFactory)
