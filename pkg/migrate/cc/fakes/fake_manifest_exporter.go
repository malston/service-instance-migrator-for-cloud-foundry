/* 
 *  Copyright 2022 VMware, Inc.
 *  
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	cfclient "github.com/cloudfoundry-community/go-cfclient"
	"github.com/vmware-tanzu/service-instance-migrator-for-cloud-foundry/pkg/cf"
	"github.com/vmware-tanzu/service-instance-migrator-for-cloud-foundry/pkg/migrate/cc"
)

type FakeManifestExporter struct {
	ExportAppManifestStub        func(cfclient.Org, cfclient.Space, cfclient.App) (cf.Application, error)
	exportAppManifestMutex       sync.RWMutex
	exportAppManifestArgsForCall []struct {
		arg1 cfclient.Org
		arg2 cfclient.Space
		arg3 cfclient.App
	}
	exportAppManifestReturns struct {
		result1 cf.Application
		result2 error
	}
	exportAppManifestReturnsOnCall map[int]struct {
		result1 cf.Application
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManifestExporter) ExportAppManifest(arg1 cfclient.Org, arg2 cfclient.Space, arg3 cfclient.App) (cf.Application, error) {
	fake.exportAppManifestMutex.Lock()
	ret, specificReturn := fake.exportAppManifestReturnsOnCall[len(fake.exportAppManifestArgsForCall)]
	fake.exportAppManifestArgsForCall = append(fake.exportAppManifestArgsForCall, struct {
		arg1 cfclient.Org
		arg2 cfclient.Space
		arg3 cfclient.App
	}{arg1, arg2, arg3})
	stub := fake.ExportAppManifestStub
	fakeReturns := fake.exportAppManifestReturns
	fake.recordInvocation("ExportAppManifest", []interface{}{arg1, arg2, arg3})
	fake.exportAppManifestMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeManifestExporter) ExportAppManifestCallCount() int {
	fake.exportAppManifestMutex.RLock()
	defer fake.exportAppManifestMutex.RUnlock()
	return len(fake.exportAppManifestArgsForCall)
}

func (fake *FakeManifestExporter) ExportAppManifestCalls(stub func(cfclient.Org, cfclient.Space, cfclient.App) (cf.Application, error)) {
	fake.exportAppManifestMutex.Lock()
	defer fake.exportAppManifestMutex.Unlock()
	fake.ExportAppManifestStub = stub
}

func (fake *FakeManifestExporter) ExportAppManifestArgsForCall(i int) (cfclient.Org, cfclient.Space, cfclient.App) {
	fake.exportAppManifestMutex.RLock()
	defer fake.exportAppManifestMutex.RUnlock()
	argsForCall := fake.exportAppManifestArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeManifestExporter) ExportAppManifestReturns(result1 cf.Application, result2 error) {
	fake.exportAppManifestMutex.Lock()
	defer fake.exportAppManifestMutex.Unlock()
	fake.ExportAppManifestStub = nil
	fake.exportAppManifestReturns = struct {
		result1 cf.Application
		result2 error
	}{result1, result2}
}

func (fake *FakeManifestExporter) ExportAppManifestReturnsOnCall(i int, result1 cf.Application, result2 error) {
	fake.exportAppManifestMutex.Lock()
	defer fake.exportAppManifestMutex.Unlock()
	fake.ExportAppManifestStub = nil
	if fake.exportAppManifestReturnsOnCall == nil {
		fake.exportAppManifestReturnsOnCall = make(map[int]struct {
			result1 cf.Application
			result2 error
		})
	}
	fake.exportAppManifestReturnsOnCall[i] = struct {
		result1 cf.Application
		result2 error
	}{result1, result2}
}

func (fake *FakeManifestExporter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.exportAppManifestMutex.RLock()
	defer fake.exportAppManifestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManifestExporter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cc.ManifestExporter = new(FakeManifestExporter)
