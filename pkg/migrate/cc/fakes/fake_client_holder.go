// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vmware-tanzu/service-instance-migrator-for-cloud-foundry/pkg/cf"
	"github.com/vmware-tanzu/service-instance-migrator-for-cloud-foundry/pkg/migrate/cc"
)

type FakeClientHolder struct {
	CFClientStub        func(bool) cf.Client
	cFClientMutex       sync.RWMutex
	cFClientArgsForCall []struct {
		arg1 bool
	}
	cFClientReturns struct {
		result1 cf.Client
	}
	cFClientReturnsOnCall map[int]struct {
		result1 cf.Client
	}
	SourceCFClientStub        func() cf.Client
	sourceCFClientMutex       sync.RWMutex
	sourceCFClientArgsForCall []struct {
	}
	sourceCFClientReturns struct {
		result1 cf.Client
	}
	sourceCFClientReturnsOnCall map[int]struct {
		result1 cf.Client
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClientHolder) CFClient(arg1 bool) cf.Client {
	fake.cFClientMutex.Lock()
	ret, specificReturn := fake.cFClientReturnsOnCall[len(fake.cFClientArgsForCall)]
	fake.cFClientArgsForCall = append(fake.cFClientArgsForCall, struct {
		arg1 bool
	}{arg1})
	stub := fake.CFClientStub
	fakeReturns := fake.cFClientReturns
	fake.recordInvocation("CFClient", []interface{}{arg1})
	fake.cFClientMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClientHolder) CFClientCallCount() int {
	fake.cFClientMutex.RLock()
	defer fake.cFClientMutex.RUnlock()
	return len(fake.cFClientArgsForCall)
}

func (fake *FakeClientHolder) CFClientCalls(stub func(bool) cf.Client) {
	fake.cFClientMutex.Lock()
	defer fake.cFClientMutex.Unlock()
	fake.CFClientStub = stub
}

func (fake *FakeClientHolder) CFClientArgsForCall(i int) bool {
	fake.cFClientMutex.RLock()
	defer fake.cFClientMutex.RUnlock()
	argsForCall := fake.cFClientArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClientHolder) CFClientReturns(result1 cf.Client) {
	fake.cFClientMutex.Lock()
	defer fake.cFClientMutex.Unlock()
	fake.CFClientStub = nil
	fake.cFClientReturns = struct {
		result1 cf.Client
	}{result1}
}

func (fake *FakeClientHolder) CFClientReturnsOnCall(i int, result1 cf.Client) {
	fake.cFClientMutex.Lock()
	defer fake.cFClientMutex.Unlock()
	fake.CFClientStub = nil
	if fake.cFClientReturnsOnCall == nil {
		fake.cFClientReturnsOnCall = make(map[int]struct {
			result1 cf.Client
		})
	}
	fake.cFClientReturnsOnCall[i] = struct {
		result1 cf.Client
	}{result1}
}

func (fake *FakeClientHolder) SourceCFClient() cf.Client {
	fake.sourceCFClientMutex.Lock()
	ret, specificReturn := fake.sourceCFClientReturnsOnCall[len(fake.sourceCFClientArgsForCall)]
	fake.sourceCFClientArgsForCall = append(fake.sourceCFClientArgsForCall, struct {
	}{})
	stub := fake.SourceCFClientStub
	fakeReturns := fake.sourceCFClientReturns
	fake.recordInvocation("SourceCFClient", []interface{}{})
	fake.sourceCFClientMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClientHolder) SourceCFClientCallCount() int {
	fake.sourceCFClientMutex.RLock()
	defer fake.sourceCFClientMutex.RUnlock()
	return len(fake.sourceCFClientArgsForCall)
}

func (fake *FakeClientHolder) SourceCFClientCalls(stub func() cf.Client) {
	fake.sourceCFClientMutex.Lock()
	defer fake.sourceCFClientMutex.Unlock()
	fake.SourceCFClientStub = stub
}

func (fake *FakeClientHolder) SourceCFClientReturns(result1 cf.Client) {
	fake.sourceCFClientMutex.Lock()
	defer fake.sourceCFClientMutex.Unlock()
	fake.SourceCFClientStub = nil
	fake.sourceCFClientReturns = struct {
		result1 cf.Client
	}{result1}
}

func (fake *FakeClientHolder) SourceCFClientReturnsOnCall(i int, result1 cf.Client) {
	fake.sourceCFClientMutex.Lock()
	defer fake.sourceCFClientMutex.Unlock()
	fake.SourceCFClientStub = nil
	if fake.sourceCFClientReturnsOnCall == nil {
		fake.sourceCFClientReturnsOnCall = make(map[int]struct {
			result1 cf.Client
		})
	}
	fake.sourceCFClientReturnsOnCall[i] = struct {
		result1 cf.Client
	}{result1}
}

func (fake *FakeClientHolder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cFClientMutex.RLock()
	defer fake.cFClientMutex.RUnlock()
	fake.sourceCFClientMutex.RLock()
	defer fake.sourceCFClientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClientHolder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cc.ClientHolder = new(FakeClientHolder)
