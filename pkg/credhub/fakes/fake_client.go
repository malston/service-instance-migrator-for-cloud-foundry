// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vmware-tanzu/service-instance-migrator-for-cloud-foundry/pkg/credhub"
)

type FakeClient struct {
	GetCredsStub        func(string) (map[string][]map[string]interface{}, error)
	getCredsMutex       sync.RWMutex
	getCredsArgsForCall []struct {
		arg1 string
	}
	getCredsReturns struct {
		result1 map[string][]map[string]interface{}
		result2 error
	}
	getCredsReturnsOnCall map[int]struct {
		result1 map[string][]map[string]interface{}
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) GetCreds(arg1 string) (map[string][]map[string]interface{}, error) {
	fake.getCredsMutex.Lock()
	ret, specificReturn := fake.getCredsReturnsOnCall[len(fake.getCredsArgsForCall)]
	fake.getCredsArgsForCall = append(fake.getCredsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetCredsStub
	fakeReturns := fake.getCredsReturns
	fake.recordInvocation("GetCreds", []interface{}{arg1})
	fake.getCredsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClient) GetCredsCallCount() int {
	fake.getCredsMutex.RLock()
	defer fake.getCredsMutex.RUnlock()
	return len(fake.getCredsArgsForCall)
}

func (fake *FakeClient) GetCredsCalls(stub func(string) (map[string][]map[string]interface{}, error)) {
	fake.getCredsMutex.Lock()
	defer fake.getCredsMutex.Unlock()
	fake.GetCredsStub = stub
}

func (fake *FakeClient) GetCredsArgsForCall(i int) string {
	fake.getCredsMutex.RLock()
	defer fake.getCredsMutex.RUnlock()
	argsForCall := fake.getCredsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeClient) GetCredsReturns(result1 map[string][]map[string]interface{}, result2 error) {
	fake.getCredsMutex.Lock()
	defer fake.getCredsMutex.Unlock()
	fake.GetCredsStub = nil
	fake.getCredsReturns = struct {
		result1 map[string][]map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetCredsReturnsOnCall(i int, result1 map[string][]map[string]interface{}, result2 error) {
	fake.getCredsMutex.Lock()
	defer fake.getCredsMutex.Unlock()
	fake.GetCredsStub = nil
	if fake.getCredsReturnsOnCall == nil {
		fake.getCredsReturnsOnCall = make(map[int]struct {
			result1 map[string][]map[string]interface{}
			result2 error
		})
	}
	fake.getCredsReturnsOnCall[i] = struct {
		result1 map[string][]map[string]interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCredsMutex.RLock()
	defer fake.getCredsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ credhub.Client = new(FakeClient)
